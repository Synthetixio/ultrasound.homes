{"version":3,"file":"chunk/128.59125aa0.js","mappings":"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","sources":["webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/chain/defineChain.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/acala.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/formatters/transaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/formatters/block.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/formatters/log.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/formatters/transactionReceipt.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/op-stack/formatters.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/encoding/toRlp.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/blobsToCommitments.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/blobsToProofs.js","webpack://@snx-v3/ultrasound/../node_modules/@noble/hashes/esm/_sha2.js","webpack://@snx-v3/ultrasound/../node_modules/@noble/hashes/esm/sha256.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/hash/sha256.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/commitmentToVersionedHash.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/constants/blob.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/constants/kzg.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/errors/blob.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/toBlobSidecars.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/toBlobs.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/transaction/assertTransaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/transaction/serializeAccessList.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/transaction/serializeTransaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/transaction/getTransactionType.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/utils/blob/commitmentsToVersionedHashes.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/op-stack/chainConfig.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/op-stack/contracts.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/op-stack/serializers.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/ancient8Sepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/baseSepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/celo/fees.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/bob.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/celo/utils.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/celo/serializers.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/celo/chainConfig.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/celo/formatters.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/fraxtalTestnet.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/dodochainTestnet.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/constants/number.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/funkiSepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/constants/number.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/formatters.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/errors/transaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/utils/isEip712Transaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/utils/assertEip712Transaction.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/serializers.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/errors/bytecode.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/chainConfig.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/utils/getEip712Domain.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/zksync/utils/hashBytecode.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/liskSepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/mainnet.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/optimismSepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/rss3Sepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/sepolia.js","webpack://@snx-v3/ultrasound/../node_modules/viem/_esm/chains/definitions/zoraSepolia.js"],"sourcesContent":["export function defineChain(chain) {\n    return {\n        formatters: undefined,\n        fees: undefined,\n        serializers: undefined,\n        ...chain,\n    };\n}\n//# sourceMappingURL=defineChain.js.map","import { defineChain } from '../../utils/chain/defineChain.js';\nexport const acala = /*#__PURE__*/ defineChain({\n    id: 787,\n    name: 'Acala',\n    network: 'acala',\n    nativeCurrency: {\n        name: 'Acala',\n        symbol: 'ACA',\n        decimals: 18,\n    },\n    rpcUrls: {\n        public: {\n            http: ['https://eth-rpc-acala.aca-api.network'],\n            webSocket: ['wss://eth-rpc-acala.aca-api.network'],\n        },\n        default: {\n            http: ['https://eth-rpc-acala.aca-api.network'],\n            webSocket: ['wss://eth-rpc-acala.aca-api.network'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Acala Blockscout',\n            url: 'https://blockscout.acala.network',\n            apiUrl: 'https://blockscout.acala.network/api',\n        },\n    },\n    testnet: false,\n});\n//# sourceMappingURL=acala.js.map","import { hexToNumber } from '../encoding/fromHex.js';\nimport { defineFormatter } from './formatter.js';\nexport const transactionType = {\n    '0x0': 'legacy',\n    '0x1': 'eip2930',\n    '0x2': 'eip1559',\n    '0x3': 'eip4844',\n};\nexport function formatTransaction(transaction) {\n    const transaction_ = {\n        ...transaction,\n        blockHash: transaction.blockHash ? transaction.blockHash : null,\n        blockNumber: transaction.blockNumber\n            ? BigInt(transaction.blockNumber)\n            : null,\n        chainId: transaction.chainId ? hexToNumber(transaction.chainId) : undefined,\n        gas: transaction.gas ? BigInt(transaction.gas) : undefined,\n        gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : undefined,\n        maxFeePerBlobGas: transaction.maxFeePerBlobGas\n            ? BigInt(transaction.maxFeePerBlobGas)\n            : undefined,\n        maxFeePerGas: transaction.maxFeePerGas\n            ? BigInt(transaction.maxFeePerGas)\n            : undefined,\n        maxPriorityFeePerGas: transaction.maxPriorityFeePerGas\n            ? BigInt(transaction.maxPriorityFeePerGas)\n            : undefined,\n        nonce: transaction.nonce ? hexToNumber(transaction.nonce) : undefined,\n        to: transaction.to ? transaction.to : null,\n        transactionIndex: transaction.transactionIndex\n            ? Number(transaction.transactionIndex)\n            : null,\n        type: transaction.type\n            ? transactionType[transaction.type]\n            : undefined,\n        typeHex: transaction.type ? transaction.type : undefined,\n        value: transaction.value ? BigInt(transaction.value) : undefined,\n        v: transaction.v ? BigInt(transaction.v) : undefined,\n    };\n    transaction_.yParity = (() => {\n        // If `yParity` is provided, we will use it.\n        if (transaction.yParity)\n            return Number(transaction.yParity);\n        // If no `yParity` provided, try derive from `v`.\n        if (typeof transaction_.v === 'bigint') {\n            if (transaction_.v === 0n || transaction_.v === 27n)\n                return 0;\n            if (transaction_.v === 1n || transaction_.v === 28n)\n                return 1;\n            if (transaction_.v >= 35n)\n                return transaction_.v % 2n === 0n ? 1 : 0;\n        }\n        return undefined;\n    })();\n    if (transaction_.type === 'legacy') {\n        delete transaction_.accessList;\n        delete transaction_.maxFeePerBlobGas;\n        delete transaction_.maxFeePerGas;\n        delete transaction_.maxPriorityFeePerGas;\n        delete transaction_.yParity;\n    }\n    if (transaction_.type === 'eip2930') {\n        delete transaction_.maxFeePerBlobGas;\n        delete transaction_.maxFeePerGas;\n        delete transaction_.maxPriorityFeePerGas;\n    }\n    if (transaction_.type === 'eip1559') {\n        delete transaction_.maxFeePerBlobGas;\n    }\n    return transaction_;\n}\nexport const defineTransaction = /*#__PURE__*/ defineFormatter('transaction', formatTransaction);\n//# sourceMappingURL=transaction.js.map","import { defineFormatter } from './formatter.js';\nimport { formatTransaction } from './transaction.js';\nexport function formatBlock(block) {\n    const transactions = block.transactions?.map((transaction) => {\n        if (typeof transaction === 'string')\n            return transaction;\n        return formatTransaction(transaction);\n    });\n    return {\n        ...block,\n        baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,\n        blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : undefined,\n        difficulty: block.difficulty ? BigInt(block.difficulty) : undefined,\n        excessBlobGas: block.excessBlobGas\n            ? BigInt(block.excessBlobGas)\n            : undefined,\n        gasLimit: block.gasLimit ? BigInt(block.gasLimit) : undefined,\n        gasUsed: block.gasUsed ? BigInt(block.gasUsed) : undefined,\n        hash: block.hash ? block.hash : null,\n        logsBloom: block.logsBloom ? block.logsBloom : null,\n        nonce: block.nonce ? block.nonce : null,\n        number: block.number ? BigInt(block.number) : null,\n        size: block.size ? BigInt(block.size) : undefined,\n        timestamp: block.timestamp ? BigInt(block.timestamp) : undefined,\n        transactions,\n        totalDifficulty: block.totalDifficulty\n            ? BigInt(block.totalDifficulty)\n            : null,\n    };\n}\nexport const defineBlock = /*#__PURE__*/ defineFormatter('block', formatBlock);\n//# sourceMappingURL=block.js.map","export function formatLog(log, { args, eventName, } = {}) {\n    return {\n        ...log,\n        blockHash: log.blockHash ? log.blockHash : null,\n        blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,\n        logIndex: log.logIndex ? Number(log.logIndex) : null,\n        transactionHash: log.transactionHash ? log.transactionHash : null,\n        transactionIndex: log.transactionIndex\n            ? Number(log.transactionIndex)\n            : null,\n        ...(eventName ? { args, eventName } : {}),\n    };\n}\n//# sourceMappingURL=log.js.map","import { hexToNumber } from '../encoding/fromHex.js';\nimport { defineFormatter } from './formatter.js';\nimport { formatLog } from './log.js';\nimport { transactionType } from './transaction.js';\nexport const receiptStatuses = {\n    '0x0': 'reverted',\n    '0x1': 'success',\n};\nexport function formatTransactionReceipt(transactionReceipt) {\n    const receipt = {\n        ...transactionReceipt,\n        blockNumber: transactionReceipt.blockNumber\n            ? BigInt(transactionReceipt.blockNumber)\n            : null,\n        contractAddress: transactionReceipt.contractAddress\n            ? transactionReceipt.contractAddress\n            : null,\n        cumulativeGasUsed: transactionReceipt.cumulativeGasUsed\n            ? BigInt(transactionReceipt.cumulativeGasUsed)\n            : null,\n        effectiveGasPrice: transactionReceipt.effectiveGasPrice\n            ? BigInt(transactionReceipt.effectiveGasPrice)\n            : null,\n        gasUsed: transactionReceipt.gasUsed\n            ? BigInt(transactionReceipt.gasUsed)\n            : null,\n        logs: transactionReceipt.logs\n            ? transactionReceipt.logs.map((log) => formatLog(log))\n            : null,\n        to: transactionReceipt.to ? transactionReceipt.to : null,\n        transactionIndex: transactionReceipt.transactionIndex\n            ? hexToNumber(transactionReceipt.transactionIndex)\n            : null,\n        status: transactionReceipt.status\n            ? receiptStatuses[transactionReceipt.status]\n            : null,\n        type: transactionReceipt.type\n            ? transactionType[transactionReceipt.type] || transactionReceipt.type\n            : null,\n    };\n    if (transactionReceipt.blobGasPrice)\n        receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);\n    if (transactionReceipt.blobGasUsed)\n        receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);\n    return receipt;\n}\nexport const defineTransactionReceipt = /*#__PURE__*/ defineFormatter('transactionReceipt', formatTransactionReceipt);\n//# sourceMappingURL=transactionReceipt.js.map","import { hexToBigInt } from '../utils/encoding/fromHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction, } from '../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js';\nexport const formatters = {\n    block: /*#__PURE__*/ defineBlock({\n        format(args) {\n            const transactions = args.transactions?.map((transaction) => {\n                if (typeof transaction === 'string')\n                    return transaction;\n                const formatted = formatTransaction(transaction);\n                if (formatted.typeHex === '0x7e') {\n                    formatted.isSystemTx = transaction.isSystemTx;\n                    formatted.mint = transaction.mint\n                        ? hexToBigInt(transaction.mint)\n                        : undefined;\n                    formatted.sourceHash = transaction.sourceHash;\n                    formatted.type = 'deposit';\n                }\n                return formatted;\n            });\n            return {\n                transactions,\n                stateRoot: args.stateRoot,\n            };\n        },\n    }),\n    transaction: /*#__PURE__*/ defineTransaction({\n        format(args) {\n            const transaction = {};\n            if (args.type === '0x7e') {\n                transaction.isSystemTx = args.isSystemTx;\n                transaction.mint = args.mint ? hexToBigInt(args.mint) : undefined;\n                transaction.sourceHash = args.sourceHash;\n                transaction.type = 'deposit';\n            }\n            return transaction;\n        },\n    }),\n    transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n        format(args) {\n            return {\n                l1GasPrice: args.l1GasPrice ? hexToBigInt(args.l1GasPrice) : null,\n                l1GasUsed: args.l1GasUsed ? hexToBigInt(args.l1GasUsed) : null,\n                l1Fee: args.l1Fee ? hexToBigInt(args.l1Fee) : null,\n                l1FeeScalar: args.l1FeeScalar ? Number(args.l1FeeScalar) : null,\n            };\n        },\n    }),\n};\n//# sourceMappingURL=formatters.js.map","import { BaseError } from '../../errors/base.js';\nimport { createCursor, } from '../cursor.js';\nimport { hexToBytes } from './toBytes.js';\nimport { bytesToHex } from './toHex.js';\nexport function toRlp(bytes, to = 'hex') {\n    const encodable = getEncodable(bytes);\n    const cursor = createCursor(new Uint8Array(encodable.length));\n    encodable.encode(cursor);\n    if (to === 'hex')\n        return bytesToHex(cursor.bytes);\n    return cursor.bytes;\n}\nexport function bytesToRlp(bytes, to = 'bytes') {\n    return toRlp(bytes, to);\n}\nexport function hexToRlp(hex, to = 'hex') {\n    return toRlp(hex, to);\n}\nfunction getEncodable(bytes) {\n    if (Array.isArray(bytes))\n        return getEncodableList(bytes.map((x) => getEncodable(x)));\n    return getEncodableBytes(bytes);\n}\nfunction getEncodableList(list) {\n    const bodyLength = list.reduce((acc, x) => acc + x.length, 0);\n    const sizeOfBodyLength = getSizeOfLength(bodyLength);\n    const length = (() => {\n        if (bodyLength <= 55)\n            return 1 + bodyLength;\n        return 1 + sizeOfBodyLength + bodyLength;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bodyLength <= 55) {\n                cursor.pushByte(0xc0 + bodyLength);\n            }\n            else {\n                cursor.pushByte(0xc0 + 55 + sizeOfBodyLength);\n                if (sizeOfBodyLength === 1)\n                    cursor.pushUint8(bodyLength);\n                else if (sizeOfBodyLength === 2)\n                    cursor.pushUint16(bodyLength);\n                else if (sizeOfBodyLength === 3)\n                    cursor.pushUint24(bodyLength);\n                else\n                    cursor.pushUint32(bodyLength);\n            }\n            for (const { encode } of list) {\n                encode(cursor);\n            }\n        },\n    };\n}\nfunction getEncodableBytes(bytesOrHex) {\n    const bytes = typeof bytesOrHex === 'string' ? hexToBytes(bytesOrHex) : bytesOrHex;\n    const sizeOfBytesLength = getSizeOfLength(bytes.length);\n    const length = (() => {\n        if (bytes.length === 1 && bytes[0] < 0x80)\n            return 1;\n        if (bytes.length <= 55)\n            return 1 + bytes.length;\n        return 1 + sizeOfBytesLength + bytes.length;\n    })();\n    return {\n        length,\n        encode(cursor) {\n            if (bytes.length === 1 && bytes[0] < 0x80) {\n                cursor.pushBytes(bytes);\n            }\n            else if (bytes.length <= 55) {\n                cursor.pushByte(0x80 + bytes.length);\n                cursor.pushBytes(bytes);\n            }\n            else {\n                cursor.pushByte(0x80 + 55 + sizeOfBytesLength);\n                if (sizeOfBytesLength === 1)\n                    cursor.pushUint8(bytes.length);\n                else if (sizeOfBytesLength === 2)\n                    cursor.pushUint16(bytes.length);\n                else if (sizeOfBytesLength === 3)\n                    cursor.pushUint24(bytes.length);\n                else\n                    cursor.pushUint32(bytes.length);\n                cursor.pushBytes(bytes);\n            }\n        },\n    };\n}\nfunction getSizeOfLength(length) {\n    if (length < 2 ** 8)\n        return 1;\n    if (length < 2 ** 16)\n        return 2;\n    if (length < 2 ** 24)\n        return 3;\n    if (length < 2 ** 32)\n        return 4;\n    throw new BaseError('Length is too large.');\n}\n//# sourceMappingURL=toRlp.js.map","import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Compute commitments from a list of blobs.\n *\n * @example\n * ```ts\n * import { blobsToCommitments, toBlobs } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * ```\n */\nexport function blobsToCommitments(parameters) {\n    const { kzg } = parameters;\n    const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n    const blobs = (typeof parameters.blobs[0] === 'string'\n        ? parameters.blobs.map((x) => hexToBytes(x))\n        : parameters.blobs);\n    const commitments = [];\n    for (const blob of blobs)\n        commitments.push(Uint8Array.from(kzg.blobToKzgCommitment(blob)));\n    return (to === 'bytes'\n        ? commitments\n        : commitments.map((x) => bytesToHex(x)));\n}\n//# sourceMappingURL=blobsToCommitments.js.map","import { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Compute the proofs for a list of blobs and their commitments.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n * ```\n */\nexport function blobsToProofs(parameters) {\n    const { kzg } = parameters;\n    const to = parameters.to ?? (typeof parameters.blobs[0] === 'string' ? 'hex' : 'bytes');\n    const blobs = (typeof parameters.blobs[0] === 'string'\n        ? parameters.blobs.map((x) => hexToBytes(x))\n        : parameters.blobs);\n    const commitments = (typeof parameters.commitments[0] === 'string'\n        ? parameters.commitments.map((x) => hexToBytes(x))\n        : parameters.commitments);\n    const proofs = [];\n    for (let i = 0; i < blobs.length; i++) {\n        const blob = blobs[i];\n        const commitment = commitments[i];\n        proofs.push(Uint8Array.from(kzg.computeBlobKzgProof(blob, commitment)));\n    }\n    return (to === 'bytes'\n        ? proofs\n        : proofs.map((x) => bytesToHex(x)));\n}\n//# sourceMappingURL=blobsToProofs.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        exists(this);\n        output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n//# sourceMappingURL=_sha2.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { sha256 as noble_sha256 } from '@noble/hashes/sha256';\nimport { isHex } from '../data/isHex.js';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { toHex } from '../encoding/toHex.js';\nexport function sha256(value, to_) {\n    const to = to_ || 'hex';\n    const bytes = noble_sha256(isHex(value, { strict: false }) ? toBytes(value) : value);\n    if (to === 'bytes')\n        return bytes;\n    return toHex(bytes);\n}\n//# sourceMappingURL=sha256.js.map","import { bytesToHex } from '../encoding/toHex.js';\nimport { sha256 } from '../hash/sha256.js';\n/**\n * Transform a commitment to it's versioned hash.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentToVersionedHash,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const [commitment] = blobsToCommitments({ blobs, kzg })\n * const versionedHash = commitmentToVersionedHash({ commitment })\n * ```\n */\nexport function commitmentToVersionedHash(parameters) {\n    const { commitment, version = 1 } = parameters;\n    const to = parameters.to ?? (typeof commitment === 'string' ? 'hex' : 'bytes');\n    const versionedHash = sha256(commitment, 'bytes');\n    versionedHash.set([version], 0);\n    return (to === 'bytes' ? versionedHash : bytesToHex(versionedHash));\n}\n//# sourceMappingURL=commitmentToVersionedHash.js.map","// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n/** Blob limit per transaction. */\nexport const blobsPerTransaction = 6;\n/** The number of bytes in a BLS scalar field element. */\nexport const bytesPerFieldElement = 32;\n/** The number of field elements in a blob. */\nexport const fieldElementsPerBlob = 4096;\n/** The number of bytes in a blob. */\nexport const bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;\n/** Blob bytes limit per transaction. */\nexport const maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction -\n    // terminator byte (0x80).\n    1 -\n    // zero byte (0x00) appended to each field element.\n    1 * fieldElementsPerBlob * blobsPerTransaction;\n//# sourceMappingURL=blob.js.map","// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4844.md#parameters\n/** The number of bytes in a KZG commitment. */\nexport const bytesPerCommitment = 48;\n/** The number of bytes in a KZG proof. */\nexport const bytesPerProof = 48;\nexport const versionedHashVersionKzg = 1;\n//# sourceMappingURL=kzg.js.map","import { versionedHashVersionKzg } from '../constants/kzg.js';\nimport { BaseError } from './base.js';\nexport class BlobSizeTooLargeError extends BaseError {\n    constructor({ maxSize, size }) {\n        super('Blob size is too large.', {\n            metaMessages: [`Max: ${maxSize} bytes`, `Given: ${size} bytes`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BlobSizeTooLargeError'\n        });\n    }\n}\nexport class EmptyBlobError extends BaseError {\n    constructor() {\n        super('Blob data must not be empty.');\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'EmptyBlobError'\n        });\n    }\n}\nexport class InvalidVersionedHashSizeError extends BaseError {\n    constructor({ hash, size, }) {\n        super(`Versioned hash \"${hash}\" size is invalid.`, {\n            metaMessages: ['Expected: 32', `Received: ${size}`],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidVersionedHashSizeError'\n        });\n    }\n}\nexport class InvalidVersionedHashVersionError extends BaseError {\n    constructor({ hash, version, }) {\n        super(`Versioned hash \"${hash}\" version is invalid.`, {\n            metaMessages: [\n                `Expected: ${versionedHashVersionKzg}`,\n                `Received: ${version}`,\n            ],\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidVersionedHashVersionError'\n        });\n    }\n}\n//# sourceMappingURL=blob.js.map","import { blobsToCommitments, } from './blobsToCommitments.js';\nimport { blobsToProofs } from './blobsToProofs.js';\nimport { toBlobs } from './toBlobs.js';\n/**\n * Transforms arbitrary data (or blobs, commitments, & proofs) into a sidecar array.\n *\n * @example\n * ```ts\n * import { toBlobSidecars, stringToHex } from 'viem'\n *\n * const sidecars = toBlobSidecars({ data: stringToHex('hello world') })\n * ```\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   toBlobs,\n *   blobsToProofs,\n *   toBlobSidecars,\n *   stringToHex\n * } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const proofs = blobsToProofs({ blobs, commitments, kzg })\n *\n * const sidecars = toBlobSidecars({ blobs, commitments, proofs })\n * ```\n */\nexport function toBlobSidecars(parameters) {\n    const { data, kzg, to } = parameters;\n    const blobs = parameters.blobs ?? toBlobs({ data: data, to });\n    const commitments = parameters.commitments ?? blobsToCommitments({ blobs, kzg: kzg, to });\n    const proofs = parameters.proofs ?? blobsToProofs({ blobs, commitments, kzg: kzg, to });\n    const sidecars = [];\n    for (let i = 0; i < blobs.length; i++)\n        sidecars.push({\n            blob: blobs[i],\n            commitment: commitments[i],\n            proof: proofs[i],\n        });\n    return sidecars;\n}\n//# sourceMappingURL=toBlobSidecars.js.map","import { bytesPerBlob, bytesPerFieldElement, fieldElementsPerBlob, maxBytesPerTransaction, } from '../../constants/blob.js';\nimport { BlobSizeTooLargeError, EmptyBlobError, } from '../../errors/blob.js';\nimport { createCursor } from '../cursor.js';\nimport { size } from '../data/size.js';\nimport { hexToBytes } from '../encoding/toBytes.js';\nimport { bytesToHex } from '../encoding/toHex.js';\n/**\n * Transforms arbitrary data to blobs.\n *\n * @example\n * ```ts\n * import { toBlobs, stringToHex } from 'viem'\n *\n * const blobs = toBlobs({ data: stringToHex('hello world') })\n * ```\n */\nexport function toBlobs(parameters) {\n    const to = parameters.to ?? (typeof parameters.data === 'string' ? 'hex' : 'bytes');\n    const data = (typeof parameters.data === 'string'\n        ? hexToBytes(parameters.data)\n        : parameters.data);\n    const size_ = size(data);\n    if (!size_)\n        throw new EmptyBlobError();\n    if (size_ > maxBytesPerTransaction)\n        throw new BlobSizeTooLargeError({\n            maxSize: maxBytesPerTransaction,\n            size: size_,\n        });\n    const blobs = [];\n    let active = true;\n    let position = 0;\n    while (active) {\n        const blob = createCursor(new Uint8Array(bytesPerBlob));\n        let size = 0;\n        while (size < fieldElementsPerBlob) {\n            const bytes = data.slice(position, position + (bytesPerFieldElement - 1));\n            // Push a zero byte so the field element doesn't overflow the BLS modulus.\n            blob.pushByte(0x00);\n            // Push the current segment of data bytes.\n            blob.pushBytes(bytes);\n            // If we detect that the current segment of data bytes is less than 31 bytes,\n            // we can stop processing and push a terminator byte to indicate the end of the blob.\n            if (bytes.length < 31) {\n                blob.pushByte(0x80);\n                active = false;\n                break;\n            }\n            size++;\n            position += 31;\n        }\n        blobs.push(blob);\n    }\n    return (to === 'bytes'\n        ? blobs.map((x) => x.bytes)\n        : blobs.map((x) => bytesToHex(x.bytes)));\n}\n//# sourceMappingURL=toBlobs.js.map","import { versionedHashVersionKzg } from '../../constants/kzg.js';\nimport { InvalidAddressError, } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { EmptyBlobError, InvalidVersionedHashSizeError, InvalidVersionedHashVersionError, } from '../../errors/blob.js';\nimport { InvalidChainIdError, } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError, } from '../../errors/node.js';\nimport { isAddress } from '../address/isAddress.js';\nimport { size } from '../data/size.js';\nimport { slice } from '../data/slice.js';\nimport { hexToNumber } from '../encoding/fromHex.js';\nexport function assertTransactionEIP4844(transaction) {\n    const { blobVersionedHashes } = transaction;\n    if (blobVersionedHashes) {\n        if (blobVersionedHashes.length === 0)\n            throw new EmptyBlobError();\n        for (const hash of blobVersionedHashes) {\n            const size_ = size(hash);\n            const version = hexToNumber(slice(hash, 0, 1));\n            if (size_ !== 32)\n                throw new InvalidVersionedHashSizeError({ hash, size: size_ });\n            if (version !== versionedHashVersionKzg)\n                throw new InvalidVersionedHashVersionError({\n                    hash,\n                    version,\n                });\n        }\n    }\n    assertTransactionEIP1559(transaction);\n}\nexport function assertTransactionEIP1559(transaction) {\n    const { chainId, maxPriorityFeePerGas, maxFeePerGas, to } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (maxFeePerGas && maxFeePerGas > 2n ** 256n - 1n)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (maxPriorityFeePerGas &&\n        maxFeePerGas &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n}\nexport function assertTransactionEIP2930(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (maxPriorityFeePerGas || maxFeePerGas)\n        throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid EIP-2930 Transaction attribute.');\n    if (gasPrice && gasPrice > 2n ** 256n - 1n)\n        throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\n}\nexport function assertTransactionLegacy(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, accessList, } = transaction;\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (typeof chainId !== 'undefined' && chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (maxPriorityFeePerGas || maxFeePerGas)\n        throw new BaseError('`maxFeePerGas`/`maxPriorityFeePerGas` is not a valid Legacy Transaction attribute.');\n    if (gasPrice && gasPrice > 2n ** 256n - 1n)\n        throw new FeeCapTooHighError({ maxFeePerGas: gasPrice });\n    if (accessList)\n        throw new BaseError('`accessList` is not a valid Legacy Transaction attribute.');\n}\n//# sourceMappingURL=assertTransaction.js.map","import { InvalidAddressError, } from '../../errors/address.js';\nimport { InvalidStorageKeySizeError, } from '../../errors/transaction.js';\nimport { isAddress } from '../address/isAddress.js';\n/*\n * Serialize an  EIP-2930 access list\n * @remarks\n * Use to create a transaction serializer with support for EIP-2930 access lists\n *\n * @param accessList - Array of objects of address and arrays of Storage Keys\n * @throws InvalidAddressError, InvalidStorageKeySizeError\n * @returns Array of hex strings\n */\nexport function serializeAccessList(accessList) {\n    if (!accessList || accessList.length === 0)\n        return [];\n    const serializedAccessList = [];\n    for (let i = 0; i < accessList.length; i++) {\n        const { address, storageKeys } = accessList[i];\n        for (let j = 0; j < storageKeys.length; j++) {\n            if (storageKeys[j].length - 2 !== 64) {\n                throw new InvalidStorageKeySizeError({ storageKey: storageKeys[j] });\n            }\n        }\n        if (!isAddress(address, { strict: false })) {\n            throw new InvalidAddressError({ address });\n        }\n        serializedAccessList.push([address, storageKeys]);\n    }\n    return serializedAccessList;\n}\n//# sourceMappingURL=serializeAccessList.js.map","import { InvalidLegacyVError, } from '../../errors/transaction.js';\nimport { blobsToCommitments, } from '../blob/blobsToCommitments.js';\nimport { blobsToProofs, } from '../blob/blobsToProofs.js';\nimport { commitmentsToVersionedHashes, } from '../blob/commitmentsToVersionedHashes.js';\nimport { toBlobSidecars, } from '../blob/toBlobSidecars.js';\nimport { concatHex } from '../data/concat.js';\nimport { trim } from '../data/trim.js';\nimport { bytesToHex, toHex } from '../encoding/toHex.js';\nimport { toRlp } from '../encoding/toRlp.js';\nimport { assertTransactionEIP1559, assertTransactionEIP2930, assertTransactionEIP4844, assertTransactionLegacy, } from './assertTransaction.js';\nimport { getTransactionType, } from './getTransactionType.js';\nimport { serializeAccessList, } from './serializeAccessList.js';\nexport function serializeTransaction(transaction, signature) {\n    const type = getTransactionType(transaction);\n    if (type === 'eip1559')\n        return serializeTransactionEIP1559(transaction, signature);\n    if (type === 'eip2930')\n        return serializeTransactionEIP2930(transaction, signature);\n    if (type === 'eip4844')\n        return serializeTransactionEIP4844(transaction, signature);\n    return serializeTransactionLegacy(transaction, signature);\n}\nfunction serializeTransactionEIP4844(transaction, signature) {\n    const { chainId, gas, nonce, to, value, maxFeePerBlobGas, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = transaction;\n    assertTransactionEIP4844(transaction);\n    let blobVersionedHashes = transaction.blobVersionedHashes;\n    let sidecars = transaction.sidecars;\n    // If `blobs` are passed, we will need to compute the KZG commitments & proofs.\n    if (transaction.blobs &&\n        (typeof blobVersionedHashes === 'undefined' ||\n            typeof sidecars === 'undefined')) {\n        const blobs = (typeof transaction.blobs[0] === 'string'\n            ? transaction.blobs\n            : transaction.blobs.map((x) => bytesToHex(x)));\n        const kzg = transaction.kzg;\n        const commitments = blobsToCommitments({\n            blobs,\n            kzg,\n        });\n        if (typeof blobVersionedHashes === 'undefined')\n            blobVersionedHashes = commitmentsToVersionedHashes({\n                commitments,\n            });\n        if (typeof sidecars === 'undefined') {\n            const proofs = blobsToProofs({ blobs, commitments, kzg });\n            sidecars = toBlobSidecars({ blobs, commitments, proofs });\n        }\n    }\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        toHex(chainId),\n        nonce ? toHex(nonce) : '0x',\n        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        maxFeePerBlobGas ? toHex(maxFeePerBlobGas) : '0x',\n        blobVersionedHashes ?? [],\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    const blobs = [];\n    const commitments = [];\n    const proofs = [];\n    if (sidecars)\n        for (let i = 0; i < sidecars.length; i++) {\n            const { blob, commitment, proof } = sidecars[i];\n            blobs.push(blob);\n            commitments.push(commitment);\n            proofs.push(proof);\n        }\n    return concatHex([\n        '0x03',\n        sidecars\n            ? // If sidecars are enabled, envelope turns into a \"wrapper\":\n                toRlp([serializedTransaction, blobs, commitments, proofs])\n            : // If sidecars are disabled, standard envelope is used:\n                toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionEIP1559(transaction, signature) {\n    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, data, } = transaction;\n    assertTransactionEIP1559(transaction);\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        toHex(chainId),\n        nonce ? toHex(nonce) : '0x',\n        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    return concatHex([\n        '0x02',\n        toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionEIP2930(transaction, signature) {\n    const { chainId, gas, data, nonce, to, value, accessList, gasPrice } = transaction;\n    assertTransactionEIP2930(transaction);\n    const serializedAccessList = serializeAccessList(accessList);\n    const serializedTransaction = [\n        toHex(chainId),\n        nonce ? toHex(nonce) : '0x',\n        gasPrice ? toHex(gasPrice) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x',\n        serializedAccessList,\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    return concatHex([\n        '0x01',\n        toRlp(serializedTransaction),\n    ]);\n}\nfunction serializeTransactionLegacy(transaction, signature) {\n    const { chainId = 0, gas, data, nonce, to, value, gasPrice } = transaction;\n    assertTransactionLegacy(transaction);\n    let serializedTransaction = [\n        nonce ? toHex(nonce) : '0x',\n        gasPrice ? toHex(gasPrice) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x',\n    ];\n    if (signature) {\n        const v = (() => {\n            // EIP-155 (inferred chainId)\n            if (signature.v >= 35n) {\n                const inferredChainId = (signature.v - 35n) / 2n;\n                if (inferredChainId > 0)\n                    return signature.v;\n                return 27n + (signature.v === 35n ? 0n : 1n);\n            }\n            // EIP-155 (explicit chainId)\n            if (chainId > 0)\n                return BigInt(chainId * 2) + BigInt(35n + signature.v - 27n);\n            // Pre-EIP-155 (no chainId)\n            const v = 27n + (signature.v === 27n ? 0n : 1n);\n            if (signature.v !== v)\n                throw new InvalidLegacyVError({ v: signature.v });\n            return v;\n        })();\n        serializedTransaction = [\n            ...serializedTransaction,\n            toHex(v),\n            signature.r,\n            signature.s,\n        ];\n    }\n    else if (chainId > 0) {\n        serializedTransaction = [\n            ...serializedTransaction,\n            toHex(chainId),\n            '0x',\n            '0x',\n        ];\n    }\n    return toRlp(serializedTransaction);\n}\nexport function toYParitySignatureArray(transaction, signature) {\n    const { r, s, v, yParity } = signature ?? transaction;\n    if (typeof r === 'undefined')\n        return [];\n    if (typeof s === 'undefined')\n        return [];\n    if (typeof v === 'undefined' && typeof yParity === 'undefined')\n        return [];\n    const yParity_ = (() => {\n        if (typeof yParity === 'number')\n            return yParity ? toHex(1) : '0x';\n        if (v === 0n)\n            return '0x';\n        if (v === 1n)\n            return toHex(1);\n        return v === 27n ? '0x' : toHex(1);\n    })();\n    return [yParity_, trim(r), trim(s)];\n}\n//# sourceMappingURL=serializeTransaction.js.map","import { InvalidSerializableTransactionError, } from '../../errors/transaction.js';\nexport function getTransactionType(transaction) {\n    if (transaction.type)\n        return transaction.type;\n    if (typeof transaction.blobs !== 'undefined' ||\n        typeof transaction.blobVersionedHashes !== 'undefined' ||\n        typeof transaction.maxFeePerBlobGas !== 'undefined' ||\n        typeof transaction.sidecars !== 'undefined')\n        return 'eip4844';\n    if (typeof transaction.maxFeePerGas !== 'undefined' ||\n        typeof transaction.maxPriorityFeePerGas !== 'undefined') {\n        return 'eip1559';\n    }\n    if (typeof transaction.gasPrice !== 'undefined') {\n        if (typeof transaction.accessList !== 'undefined')\n            return 'eip2930';\n        return 'legacy';\n    }\n    throw new InvalidSerializableTransactionError({ transaction });\n}\n//# sourceMappingURL=getTransactionType.js.map","import { commitmentToVersionedHash, } from './commitmentToVersionedHash.js';\n/**\n * Transform a list of commitments to their versioned hashes.\n *\n * @example\n * ```ts\n * import {\n *   blobsToCommitments,\n *   commitmentsToVersionedHashes,\n *   toBlobs\n * } from 'viem'\n * import { kzg } from './kzg'\n *\n * const blobs = toBlobs({ data: '0x1234' })\n * const commitments = blobsToCommitments({ blobs, kzg })\n * const versionedHashes = commitmentsToVersionedHashes({ commitments })\n * ```\n */\nexport function commitmentsToVersionedHashes(parameters) {\n    const { commitments, version } = parameters;\n    const to = parameters.to ?? (typeof commitments[0] === 'string' ? 'hex' : 'bytes');\n    const hashes = [];\n    for (const commitment of commitments) {\n        hashes.push(commitmentToVersionedHash({\n            commitment,\n            to,\n            version,\n        }));\n    }\n    return hashes;\n}\n//# sourceMappingURL=commitmentsToVersionedHashes.js.map","import { contracts } from './contracts.js';\nimport { formatters } from './formatters.js';\nimport { serializers } from './serializers.js';\nexport const chainConfig = {\n    contracts,\n    formatters,\n    serializers,\n};\n//# sourceMappingURL=chainConfig.js.map","/**\n * Predeploy contracts for OP Stack.\n * @see https://github.com/ethereum-optimism/optimism/blob/develop/specs/predeploys.md\n */\nexport const contracts = {\n    gasPriceOracle: { address: '0x420000000000000000000000000000000000000F' },\n    l1Block: { address: '0x4200000000000000000000000000000000000015' },\n    l2CrossDomainMessenger: {\n        address: '0x4200000000000000000000000000000000000007',\n    },\n    l2Erc721Bridge: { address: '0x4200000000000000000000000000000000000014' },\n    l2StandardBridge: { address: '0x4200000000000000000000000000000000000010' },\n    l2ToL1MessagePasser: {\n        address: '0x4200000000000000000000000000000000000016',\n    },\n};\n//# sourceMappingURL=contracts.js.map","import { InvalidAddressError } from '../errors/address.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_, } from '../utils/transaction/serializeTransaction.js';\nexport function serializeTransaction(transaction, signature) {\n    if (isDeposit(transaction))\n        return serializeTransactionDeposit(transaction);\n    return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n    transaction: serializeTransaction,\n};\nfunction serializeTransactionDeposit(transaction) {\n    assertTransactionDeposit(transaction);\n    const { sourceHash, data, from, gas, isSystemTx, mint, to, value } = transaction;\n    const serializedTransaction = [\n        sourceHash,\n        from,\n        to ?? '0x',\n        mint ? toHex(mint) : '0x',\n        value ? toHex(value) : '0x',\n        gas ? toHex(gas) : '0x',\n        isSystemTx ? '0x1' : '0x',\n        data ?? '0x',\n    ];\n    return concatHex([\n        '0x7e',\n        toRlp(serializedTransaction),\n    ]);\n}\nfunction isDeposit(transaction) {\n    if (transaction.type === 'deposit')\n        return true;\n    if (typeof transaction.sourceHash !== 'undefined')\n        return true;\n    return false;\n}\nexport function assertTransactionDeposit(transaction) {\n    const { from, to } = transaction;\n    if (from && !isAddress(from))\n        throw new InvalidAddressError({ address: from });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n}\n//# sourceMappingURL=serializers.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const ancient8Sepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 28122024,\n    name: 'Ancient8 Testnet',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://rpcv2-testnet.ancient8.gg'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Ancient8 Celestia Testnet explorer',\n            url: 'https://scanv2-testnet.ancient8.gg',\n            apiUrl: 'https://scanv2-testnet.ancient8.gg/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0x942fD5017c0F60575930D8574Eaca13BEcD6e1bB',\n            },\n        },\n        portal: {\n            [sourceId]: {\n                address: '0xfa1d9E26A6aCD7b22115D27572c1221B9803c960',\n                blockCreated: 4972908,\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0xF6Bc0146d3c74D48306e79Ae134A260E418C9335',\n                blockCreated: 4972908,\n            },\n        },\n    },\n    sourceId,\n});\n//# sourceMappingURL=ancient8Sepolia.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const baseSepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 84532,\n    network: 'base-sepolia',\n    name: 'Base Sepolia',\n    nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://sepolia.base.org'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Basescan',\n            url: 'https://sepolia.basescan.org',\n            apiUrl: 'https://api-sepolia.basescan.org/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0x84457ca9D0163FbC4bbfe4Dfbb20ba46e48DF254',\n            },\n        },\n        portal: {\n            [sourceId]: {\n                address: '0x49f53e41452c74589e85ca1677426ba426459e85',\n                blockCreated: 4446677,\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0xfd0Bf71F60660E2f608ed56e1659C450eB113120',\n                blockCreated: 4446677,\n            },\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 1059647,\n        },\n    },\n    testnet: true,\n    sourceId,\n});\n//# sourceMappingURL=baseSepolia.js.map","export const fees = {\n    /*\n     * Estimates the fees per gas for a transaction.\n  \n     * If the transaction is to be paid in a token (feeCurrency is present) then the fees\n     * are estimated in the value of the token. Otherwise falls back to the default\n     * estimation by returning null.\n     *\n     * @param params fee estimation function parameters\n     */\n    estimateFeesPerGas: async (params) => {\n        if (!params.request?.feeCurrency)\n            return null;\n        const [maxFeePerGas, maxPriorityFeePerGas] = await Promise.all([\n            estimateFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n            estimateMaxPriorityFeePerGasInFeeCurrency(params.client, params.request.feeCurrency),\n        ]);\n        return {\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n        };\n    },\n};\n/*\n * Estimate the fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateFeePerGasInFeeCurrency(client, feeCurrency) {\n    const fee = await client.request({\n        method: 'eth_gasPrice',\n        params: [feeCurrency],\n    });\n    return BigInt(fee);\n}\n/*\n * Estimate the max priority fee per gas in the value of the fee token\n\n *\n * @param client - Client to use\n * @param feeCurrency -  Address of a whitelisted fee token\n * @returns The fee per gas in wei in the value of the  fee token\n *\n */\nasync function estimateMaxPriorityFeePerGasInFeeCurrency(client, feeCurrency) {\n    const feesPerGas = await client.request({\n        method: 'eth_maxPriorityFeePerGas',\n        params: [feeCurrency],\n    });\n    return BigInt(feesPerGas);\n}\n//# sourceMappingURL=fees.js.map","import { defineChain } from '../../utils/chain/defineChain.js';\nexport const bob = defineChain({\n    id: 60808,\n    name: 'BOB',\n    nativeCurrency: {\n        decimals: 18,\n        name: 'ETH',\n        symbol: 'ETH',\n    },\n    rpcUrls: {\n        default: {\n            http: ['https://rpc.gobob.xyz'],\n            webSocket: ['wss://rpc.gobob.xyz'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Blockscout',\n            url: 'https://explorer.gobob.xyz',\n        },\n    },\n    contracts: {\n        multicall3: {\n            address: '0x63f8279bccDb75c0F38e0CD6B6A0c72a0a760FF9',\n            blockCreated: 457045,\n        },\n    },\n    testnet: false,\n});\n//# sourceMappingURL=bob.js.map","import { trim } from '../utils/data/trim.js';\nexport function isEmpty(value) {\n    return (value === 0 ||\n        value === 0n ||\n        value === undefined ||\n        value === null ||\n        value === '0' ||\n        value === '' ||\n        (typeof value === 'string' &&\n            (trim(value).toLowerCase() === '0x' ||\n                trim(value).toLowerCase() === '0x00')));\n}\nexport function isPresent(value) {\n    return !isEmpty(value);\n}\nexport function isEIP1559(transaction) {\n    return (typeof transaction.maxFeePerGas !== 'undefined' &&\n        typeof transaction.maxPriorityFeePerGas !== 'undefined');\n}\nexport function isCIP64(transaction) {\n    /*\n     * Enable end user to force the tx to be considered as a CIP-64.\n     *\n     * The preliminary type will be determined as \"eip1559\" by src/utils/transaction/getTransactionType.ts\n     * and so we need the logic below to check for the specific value instead of checking if just any\n     * transaction type is provided. If that's anything else than \"cip64\" then we need to reevaluate the\n     * type based on the transaction fields.\n     *\n     * Modify with caution and according to https://github.com/celo-org/celo-proposals/blob/master/CIPs/cip-0064.md\n     */\n    if (transaction.type === 'cip64') {\n        return true;\n    }\n    return isEIP1559(transaction) && isPresent(transaction.feeCurrency);\n}\n//# sourceMappingURL=utils.js.map","import { InvalidAddressError } from '../errors/address.js';\nimport { BaseError } from '../errors/base.js';\nimport { InvalidChainIdError } from '../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../errors/node.js';\nimport { isAddress } from '../utils/address/isAddress.js';\nimport { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../utils/transaction/serializeAccessList.js';\nimport { serializeTransaction as serializeTransaction_, toYParitySignatureArray, } from '../utils/transaction/serializeTransaction.js';\nimport { isCIP64, isEmpty, isPresent } from './utils.js';\nexport function serializeTransaction(transaction, signature) {\n    if (isCIP64(transaction))\n        return serializeTransactionCIP64(transaction, signature);\n    return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n    transaction: serializeTransaction,\n};\nfunction serializeTransactionCIP64(transaction, signature) {\n    assertTransactionCIP64(transaction);\n    const { chainId, gas, nonce, to, value, maxFeePerGas, maxPriorityFeePerGas, accessList, feeCurrency, data, } = transaction;\n    const serializedTransaction = [\n        toHex(chainId),\n        nonce ? toHex(nonce) : '0x',\n        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x',\n        serializeAccessList(accessList),\n        feeCurrency,\n        ...toYParitySignatureArray(transaction, signature),\n    ];\n    return concatHex([\n        '0x7b',\n        toRlp(serializedTransaction),\n    ]);\n}\n// maxFeePerGas must be less than 2^256 - 1\nconst MAX_MAX_FEE_PER_GAS = 2n ** 256n - 1n;\nexport function assertTransactionCIP42(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency, gatewayFee, gatewayFeeRecipient, } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (gasPrice)\n        throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n    if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (isPresent(maxPriorityFeePerGas) &&\n        isPresent(maxFeePerGas) &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n    if ((isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n        (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))) {\n        throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n    }\n    if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n        throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n    }\n    if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n        throw new InvalidAddressError(gatewayFeeRecipient);\n    }\n    if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n        throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n    }\n}\nexport function assertTransactionCIP64(transaction) {\n    const { chainId, maxPriorityFeePerGas, gasPrice, maxFeePerGas, to, feeCurrency, } = transaction;\n    if (chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (gasPrice)\n        throw new BaseError('`gasPrice` is not a valid CIP-64 Transaction attribute.');\n    if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n        throw new FeeCapTooHighError({ maxFeePerGas });\n    if (isPresent(maxPriorityFeePerGas) &&\n        isPresent(maxFeePerGas) &&\n        maxPriorityFeePerGas > maxFeePerGas)\n        throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas });\n    if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n        throw new BaseError('`feeCurrency` MUST be a token address for CIP-64 transactions.');\n    }\n    if (isEmpty(feeCurrency)) {\n        throw new BaseError('`feeCurrency` must be provided for CIP-64 transactions.');\n    }\n}\n//# sourceMappingURL=serializers.js.map","import { fees } from './fees.js';\nimport { formatters } from './formatters.js';\nimport { serializers } from './serializers.js';\nexport const chainConfig = {\n    formatters,\n    serializers,\n    fees,\n};\n//# sourceMappingURL=chainConfig.js.map","import { hexToBigInt } from '../utils/encoding/fromHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction, } from '../utils/formatters/transaction.js';\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js';\nimport { isCIP64 } from './utils.js';\nexport const formatters = {\n    block: /*#__PURE__*/ defineBlock({\n        exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n        format(args) {\n            const transactions = args.transactions?.map((transaction) => {\n                if (typeof transaction === 'string')\n                    return transaction;\n                return {\n                    ...formatTransaction(transaction),\n                    feeCurrency: transaction.feeCurrency,\n                    ...(transaction.type !== '0x7b'\n                        ? {\n                            gatewayFee: transaction.gatewayFee\n                                ? hexToBigInt(transaction.gatewayFee)\n                                : null,\n                            gatewayFeeRecipient: transaction.gatewayFeeRecipient || null,\n                        }\n                        : {}),\n                };\n            });\n            return {\n                randomness: args.randomness,\n                transactions,\n            };\n        },\n    }),\n    transaction: /*#__PURE__*/ defineTransaction({\n        format(args) {\n            const transaction = { feeCurrency: args.feeCurrency };\n            if (args.type === '0x7b')\n                transaction.type = 'cip64';\n            else {\n                if (args.type === '0x7c')\n                    transaction.type = 'cip42';\n                transaction.gatewayFee = args.gatewayFee\n                    ? hexToBigInt(args.gatewayFee)\n                    : null;\n                transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;\n            }\n            return transaction;\n        },\n    }),\n    transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n        format(args) {\n            const request = {\n                feeCurrency: args.feeCurrency,\n            };\n            if (isCIP64(args)) {\n                request.type = '0x7b';\n            }\n            return request;\n        },\n    }),\n};\n//# sourceMappingURL=formatters.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 17000; // holesky\nexport const fraxtalTestnet = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 2522,\n    name: 'Fraxtal Testnet',\n    nativeCurrency: { name: 'Frax Ether', symbol: 'frxETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://rpc.testnet.frax.com'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'fraxscan testnet',\n            url: 'https://holesky.fraxscan.com',\n            apiUrl: 'https://api-holesky.fraxscan.com/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0x715EA64DA13F4d0831ece4Ad3E8c1aa013167F32',\n            },\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n        },\n        portal: {\n            [sourceId]: {\n                address: '0xB9c64BfA498d5b9a8398Ed6f46eb76d90dE5505d',\n                blockCreated: 318416,\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0x0BaafC217162f64930909aD9f2B27125121d6332',\n                blockCreated: 318416,\n            },\n        },\n    },\n    sourceId,\n});\n//# sourceMappingURL=fraxtalTestnet.js.map","import { defineChain } from '../../utils/chain/defineChain.js';\nexport const dodochainTestnet = defineChain({\n    id: 53457,\n    name: 'DODOchain Testnet',\n    nativeCurrency: { decimals: 18, name: 'DODO', symbol: 'DODO' },\n    rpcUrls: {\n        default: {\n            http: ['https://dodochain-testnet.alt.technology'],\n            webSocket: ['wss://dodochain-testnet.alt.technology/ws'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'DODOchain Testnet (Sepolia) Explorer',\n            url: 'https://testnet-scan.dodochain.com',\n        },\n    },\n    testnet: true,\n});\n//# sourceMappingURL=dodochainTestnet.js.map","import { maxUint16 } from '../../constants/number.js';\nexport const gasPerPubdataDefault = 50000n;\nexport const maxBytecodeSize = maxUint16 * 32n;\n//# sourceMappingURL=number.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const funkiSepolia = defineChain({\n    ...chainConfig,\n    id: 3397901,\n    network: 'funkiSepolia',\n    name: 'Funki Sepolia Sandbox',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://funki-testnet.alt.technology'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Funki Sepolia Sandbox Explorer',\n            url: 'https://sepolia-sandbox.funkichain.com/',\n        },\n    },\n    testnet: true,\n    contracts: {\n        ...chainConfig.contracts,\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 1620204,\n        },\n    },\n    sourceId,\n});\n//# sourceMappingURL=funkiSepolia.js.map","export const maxInt8 = 2n ** (8n - 1n) - 1n;\nexport const maxInt16 = 2n ** (16n - 1n) - 1n;\nexport const maxInt24 = 2n ** (24n - 1n) - 1n;\nexport const maxInt32 = 2n ** (32n - 1n) - 1n;\nexport const maxInt40 = 2n ** (40n - 1n) - 1n;\nexport const maxInt48 = 2n ** (48n - 1n) - 1n;\nexport const maxInt56 = 2n ** (56n - 1n) - 1n;\nexport const maxInt64 = 2n ** (64n - 1n) - 1n;\nexport const maxInt72 = 2n ** (72n - 1n) - 1n;\nexport const maxInt80 = 2n ** (80n - 1n) - 1n;\nexport const maxInt88 = 2n ** (88n - 1n) - 1n;\nexport const maxInt96 = 2n ** (96n - 1n) - 1n;\nexport const maxInt104 = 2n ** (104n - 1n) - 1n;\nexport const maxInt112 = 2n ** (112n - 1n) - 1n;\nexport const maxInt120 = 2n ** (120n - 1n) - 1n;\nexport const maxInt128 = 2n ** (128n - 1n) - 1n;\nexport const maxInt136 = 2n ** (136n - 1n) - 1n;\nexport const maxInt144 = 2n ** (144n - 1n) - 1n;\nexport const maxInt152 = 2n ** (152n - 1n) - 1n;\nexport const maxInt160 = 2n ** (160n - 1n) - 1n;\nexport const maxInt168 = 2n ** (168n - 1n) - 1n;\nexport const maxInt176 = 2n ** (176n - 1n) - 1n;\nexport const maxInt184 = 2n ** (184n - 1n) - 1n;\nexport const maxInt192 = 2n ** (192n - 1n) - 1n;\nexport const maxInt200 = 2n ** (200n - 1n) - 1n;\nexport const maxInt208 = 2n ** (208n - 1n) - 1n;\nexport const maxInt216 = 2n ** (216n - 1n) - 1n;\nexport const maxInt224 = 2n ** (224n - 1n) - 1n;\nexport const maxInt232 = 2n ** (232n - 1n) - 1n;\nexport const maxInt240 = 2n ** (240n - 1n) - 1n;\nexport const maxInt248 = 2n ** (248n - 1n) - 1n;\nexport const maxInt256 = 2n ** (256n - 1n) - 1n;\nexport const minInt8 = -(2n ** (8n - 1n));\nexport const minInt16 = -(2n ** (16n - 1n));\nexport const minInt24 = -(2n ** (24n - 1n));\nexport const minInt32 = -(2n ** (32n - 1n));\nexport const minInt40 = -(2n ** (40n - 1n));\nexport const minInt48 = -(2n ** (48n - 1n));\nexport const minInt56 = -(2n ** (56n - 1n));\nexport const minInt64 = -(2n ** (64n - 1n));\nexport const minInt72 = -(2n ** (72n - 1n));\nexport const minInt80 = -(2n ** (80n - 1n));\nexport const minInt88 = -(2n ** (88n - 1n));\nexport const minInt96 = -(2n ** (96n - 1n));\nexport const minInt104 = -(2n ** (104n - 1n));\nexport const minInt112 = -(2n ** (112n - 1n));\nexport const minInt120 = -(2n ** (120n - 1n));\nexport const minInt128 = -(2n ** (128n - 1n));\nexport const minInt136 = -(2n ** (136n - 1n));\nexport const minInt144 = -(2n ** (144n - 1n));\nexport const minInt152 = -(2n ** (152n - 1n));\nexport const minInt160 = -(2n ** (160n - 1n));\nexport const minInt168 = -(2n ** (168n - 1n));\nexport const minInt176 = -(2n ** (176n - 1n));\nexport const minInt184 = -(2n ** (184n - 1n));\nexport const minInt192 = -(2n ** (192n - 1n));\nexport const minInt200 = -(2n ** (200n - 1n));\nexport const minInt208 = -(2n ** (208n - 1n));\nexport const minInt216 = -(2n ** (216n - 1n));\nexport const minInt224 = -(2n ** (224n - 1n));\nexport const minInt232 = -(2n ** (232n - 1n));\nexport const minInt240 = -(2n ** (240n - 1n));\nexport const minInt248 = -(2n ** (248n - 1n));\nexport const minInt256 = -(2n ** (256n - 1n));\nexport const maxUint8 = 2n ** 8n - 1n;\nexport const maxUint16 = 2n ** 16n - 1n;\nexport const maxUint24 = 2n ** 24n - 1n;\nexport const maxUint32 = 2n ** 32n - 1n;\nexport const maxUint40 = 2n ** 40n - 1n;\nexport const maxUint48 = 2n ** 48n - 1n;\nexport const maxUint56 = 2n ** 56n - 1n;\nexport const maxUint64 = 2n ** 64n - 1n;\nexport const maxUint72 = 2n ** 72n - 1n;\nexport const maxUint80 = 2n ** 80n - 1n;\nexport const maxUint88 = 2n ** 88n - 1n;\nexport const maxUint96 = 2n ** 96n - 1n;\nexport const maxUint104 = 2n ** 104n - 1n;\nexport const maxUint112 = 2n ** 112n - 1n;\nexport const maxUint120 = 2n ** 120n - 1n;\nexport const maxUint128 = 2n ** 128n - 1n;\nexport const maxUint136 = 2n ** 136n - 1n;\nexport const maxUint144 = 2n ** 144n - 1n;\nexport const maxUint152 = 2n ** 152n - 1n;\nexport const maxUint160 = 2n ** 160n - 1n;\nexport const maxUint168 = 2n ** 168n - 1n;\nexport const maxUint176 = 2n ** 176n - 1n;\nexport const maxUint184 = 2n ** 184n - 1n;\nexport const maxUint192 = 2n ** 192n - 1n;\nexport const maxUint200 = 2n ** 200n - 1n;\nexport const maxUint208 = 2n ** 208n - 1n;\nexport const maxUint216 = 2n ** 216n - 1n;\nexport const maxUint224 = 2n ** 224n - 1n;\nexport const maxUint232 = 2n ** 232n - 1n;\nexport const maxUint240 = 2n ** 240n - 1n;\nexport const maxUint248 = 2n ** 248n - 1n;\nexport const maxUint256 = 2n ** 256n - 1n;\n//# sourceMappingURL=number.js.map","import { hexToBigInt, hexToNumber } from '../utils/encoding/fromHex.js';\nimport { hexToBytes } from '../utils/encoding/toBytes.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { defineBlock } from '../utils/formatters/block.js';\nimport { formatLog } from '../utils/formatters/log.js';\nimport { defineTransaction } from '../utils/formatters/transaction.js';\nimport { defineTransactionReceipt } from '../utils/formatters/transactionReceipt.js';\nimport { defineTransactionRequest } from '../utils/formatters/transactionRequest.js';\nimport { gasPerPubdataDefault } from './constants/number.js';\nexport const formatters = {\n    block: /*#__PURE__*/ defineBlock({\n        format(args) {\n            const transactions = args.transactions?.map((transaction) => {\n                if (typeof transaction === 'string')\n                    return transaction;\n                const formatted = formatters.transaction?.format(transaction);\n                if (formatted.typeHex === '0x71')\n                    formatted.type = 'eip712';\n                else if (formatted.typeHex === '0xff')\n                    formatted.type = 'priority';\n                return formatted;\n            });\n            return {\n                l1BatchNumber: args.l1BatchNumber\n                    ? hexToBigInt(args.l1BatchNumber)\n                    : null,\n                l1BatchTimestamp: args.l1BatchTimestamp\n                    ? hexToBigInt(args.l1BatchTimestamp)\n                    : null,\n                transactions,\n            };\n        },\n    }),\n    transaction: /*#__PURE__*/ defineTransaction({\n        format(args) {\n            const transaction = {};\n            if (args.type === '0x71')\n                transaction.type = 'eip712';\n            else if (args.type === '0xff')\n                transaction.type = 'priority';\n            return {\n                ...transaction,\n                l1BatchNumber: args.l1BatchNumber\n                    ? hexToBigInt(args.l1BatchNumber)\n                    : null,\n                l1BatchTxIndex: args.l1BatchTxIndex\n                    ? hexToBigInt(args.l1BatchTxIndex)\n                    : null,\n            };\n        },\n    }),\n    transactionReceipt: /*#__PURE__*/ defineTransactionReceipt({\n        format(args) {\n            return {\n                l1BatchNumber: args.l1BatchNumber\n                    ? hexToBigInt(args.l1BatchNumber)\n                    : null,\n                l1BatchTxIndex: args.l1BatchTxIndex\n                    ? hexToBigInt(args.l1BatchTxIndex)\n                    : null,\n                logs: args.logs.map((log) => {\n                    return {\n                        ...formatLog(log),\n                        l1BatchNumber: log.l1BatchNumber\n                            ? hexToBigInt(log.l1BatchNumber)\n                            : null,\n                        transactionLogIndex: hexToNumber(log.transactionLogIndex),\n                        logType: log.logType,\n                    };\n                }),\n                l2ToL1Logs: args.l2ToL1Logs.map((l2ToL1Log) => {\n                    return {\n                        blockNumber: hexToBigInt(l2ToL1Log.blockHash),\n                        blockHash: l2ToL1Log.blockHash,\n                        l1BatchNumber: hexToBigInt(l2ToL1Log.l1BatchNumber),\n                        transactionIndex: hexToBigInt(l2ToL1Log.transactionIndex),\n                        shardId: hexToBigInt(l2ToL1Log.shardId),\n                        isService: l2ToL1Log.isService,\n                        sender: l2ToL1Log.sender,\n                        key: l2ToL1Log.key,\n                        value: l2ToL1Log.value,\n                        transactionHash: l2ToL1Log.transactionHash,\n                        logIndex: hexToBigInt(l2ToL1Log.logIndex),\n                    };\n                }),\n            };\n        },\n    }),\n    transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n        exclude: [\n            'customSignature',\n            'factoryDeps',\n            'gasPerPubdata',\n            'paymaster',\n            'paymasterInput',\n        ],\n        format(args) {\n            if (args.gasPerPubdata ||\n                (args.paymaster && args.paymasterInput) ||\n                args.factoryDeps ||\n                args.customSignature)\n                return {\n                    eip712Meta: {\n                        ...(args.gasPerPubdata\n                            ? { gasPerPubdata: toHex(args.gasPerPubdata) }\n                            : { gasPerPubdata: toHex(gasPerPubdataDefault) }),\n                        ...(args.paymaster && args.paymasterInput\n                            ? {\n                                paymasterParams: {\n                                    paymaster: args.paymaster,\n                                    paymasterInput: Array.from(hexToBytes(args.paymasterInput)),\n                                },\n                            }\n                            : {}),\n                        ...(args.factoryDeps\n                            ? {\n                                factoryDeps: args.factoryDeps.map((dep) => Array.from(hexToBytes(dep))),\n                            }\n                            : {}),\n                        ...(args.customSignature\n                            ? {\n                                customSignature: Array.from(hexToBytes(args.customSignature)),\n                            }\n                            : {}),\n                    },\n                    type: '0x71',\n                };\n            return {};\n        },\n    }),\n};\n//# sourceMappingURL=formatters.js.map","import { BaseError } from '../../errors/base.js';\nexport class InvalidEip712TransactionError extends BaseError {\n    constructor() {\n        super([\n            'Transaction is not an EIP712 transaction.',\n            '',\n            'Transaction must:',\n            '  - include `type: \"eip712\"`',\n            '  - include one of the following: `customSignature`, `paymaster`, `paymasterInput`, `gasPerPubdata`, `factoryDeps`',\n        ].join('\\n'));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'InvalidEip712TransactionError'\n        });\n    }\n}\n//# sourceMappingURL=transaction.js.map","export function isEIP712Transaction(transaction) {\n    if (transaction.type === 'eip712')\n        return true;\n    if (('customSignature' in transaction && transaction.customSignature) ||\n        ('paymaster' in transaction && transaction.paymaster) ||\n        ('paymasterInput' in transaction && transaction.paymasterInput) ||\n        ('gasPerPubdata' in transaction &&\n            typeof transaction.gasPerPubdata === 'bigint') ||\n        ('factoryDeps' in transaction && transaction.factoryDeps))\n        return true;\n    return false;\n}\n//# sourceMappingURL=isEip712Transaction.js.map","import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { InvalidEip712TransactionError } from '../errors/transaction.js';\nimport { isEIP712Transaction } from './isEip712Transaction.js';\nexport function assertEip712Transaction(transaction) {\n    const { chainId, to, from, paymaster, paymasterInput } = transaction;\n    if (!isEIP712Transaction(transaction))\n        throw new InvalidEip712TransactionError();\n    if (!chainId || chainId <= 0)\n        throw new InvalidChainIdError({ chainId });\n    if (to && !isAddress(to))\n        throw new InvalidAddressError({ address: to });\n    if (from && !isAddress(from))\n        throw new InvalidAddressError({ address: from });\n    if (paymaster && !isAddress(paymaster))\n        throw new InvalidAddressError({ address: paymaster });\n    if (paymaster && !paymasterInput) {\n        throw new BaseError('`paymasterInput` must be provided when `paymaster` is defined');\n    }\n    if (!paymaster && paymasterInput) {\n        throw new BaseError('`paymaster` must be provided when `paymasterInput` is defined');\n    }\n}\n//# sourceMappingURL=assertEip712Transaction.js.map","import { concatHex } from '../utils/data/concat.js';\nimport { toHex } from '../utils/encoding/toHex.js';\nimport { toRlp } from '../utils/encoding/toRlp.js';\nimport { serializeTransaction as serializeTransaction_ } from '../utils/transaction/serializeTransaction.js';\nimport { gasPerPubdataDefault } from './constants/number.js';\nimport { assertEip712Transaction } from './utils/assertEip712Transaction.js';\nimport { isEIP712Transaction } from './utils/isEip712Transaction.js';\nexport function serializeTransaction(transaction, signature) {\n    if (isEIP712Transaction(transaction))\n        return serializeTransactionEIP712(transaction);\n    return serializeTransaction_(transaction, signature);\n}\nexport const serializers = {\n    transaction: serializeTransaction,\n};\nfunction serializeTransactionEIP712(transaction) {\n    const { chainId, gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, customSignature, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data, } = transaction;\n    assertEip712Transaction(transaction);\n    const serializedTransaction = [\n        nonce ? toHex(nonce) : '0x',\n        maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n        maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n        gas ? toHex(gas) : '0x',\n        to ?? '0x',\n        value ? toHex(value) : '0x',\n        data ?? '0x0',\n        toHex(chainId),\n        toHex(''),\n        toHex(''),\n        toHex(chainId),\n        from ?? '0x',\n        gasPerPubdata ? toHex(gasPerPubdata) : toHex(gasPerPubdataDefault),\n        factoryDeps ?? [],\n        customSignature ?? '0x', // EIP712 signature\n        paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n    ];\n    return concatHex([\n        '0x71',\n        toRlp(serializedTransaction),\n    ]);\n}\n//# sourceMappingURL=serializers.js.map","import { BaseError } from '../../errors/base.js';\nexport class BytecodeLengthExceedsMaxSizeError extends BaseError {\n    constructor({ givenLength, maxBytecodeSize, }) {\n        super(`Bytecode cannot be longer than ${maxBytecodeSize} bytes. Given length: ${givenLength}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BytecodeLengthExceedsMaxSizeError'\n        });\n    }\n}\nexport class BytecodeLengthInWordsMustBeOddError extends BaseError {\n    constructor({ givenLengthInWords }) {\n        super(`Bytecode length in 32-byte words must be odd. Given length in words: ${givenLengthInWords}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BytecodeLengthInWordsMustBeOddError'\n        });\n    }\n}\nexport class BytecodeLengthMustBeDivisibleBy32Error extends BaseError {\n    constructor({ givenLength }) {\n        super(`The bytecode length in bytes must be divisible by 32. Given length: ${givenLength}`);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'BytecodeLengthMustBeDivisibleBy32Error'\n        });\n    }\n}\n//# sourceMappingURL=bytecode.js.map","import { formatters } from './formatters.js';\nimport { serializers } from './serializers.js';\nimport { getEip712Domain } from './utils/getEip712Domain.js';\nexport const chainConfig = {\n    formatters,\n    serializers,\n    custom: {\n        getEip712Domain,\n    },\n};\n//# sourceMappingURL=chainConfig.js.map","import { toHex } from '../../utils/encoding/toHex.js';\nimport { gasPerPubdataDefault } from '../constants/number.js';\nimport { assertEip712Transaction } from './assertEip712Transaction.js';\nimport { hashBytecode } from './hashBytecode.js';\nexport const getEip712Domain = (transaction) => {\n    assertEip712Transaction(transaction);\n    const message = transactionToMessage(transaction);\n    return {\n        domain: {\n            name: 'zkSync',\n            version: '2',\n            chainId: transaction.chainId,\n        },\n        types: {\n            Transaction: [\n                { name: 'txType', type: 'uint256' },\n                { name: 'from', type: 'uint256' },\n                { name: 'to', type: 'uint256' },\n                { name: 'gasLimit', type: 'uint256' },\n                { name: 'gasPerPubdataByteLimit', type: 'uint256' },\n                { name: 'maxFeePerGas', type: 'uint256' },\n                { name: 'maxPriorityFeePerGas', type: 'uint256' },\n                { name: 'paymaster', type: 'uint256' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'value', type: 'uint256' },\n                { name: 'data', type: 'bytes' },\n                { name: 'factoryDeps', type: 'bytes32[]' },\n                { name: 'paymasterInput', type: 'bytes' },\n            ],\n        },\n        primaryType: 'Transaction',\n        message: message,\n    };\n};\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\nfunction transactionToMessage(transaction) {\n    const { gas, nonce, to, from, value, maxFeePerGas, maxPriorityFeePerGas, factoryDeps, paymaster, paymasterInput, gasPerPubdata, data, } = transaction;\n    return {\n        txType: 113n,\n        from: BigInt(from),\n        to: to ? BigInt(to) : 0n,\n        gasLimit: gas ?? 0n,\n        gasPerPubdataByteLimit: gasPerPubdata ?? gasPerPubdataDefault,\n        maxFeePerGas: maxFeePerGas ?? 0n,\n        maxPriorityFeePerGas: maxPriorityFeePerGas ?? 0n,\n        paymaster: paymaster ? BigInt(paymaster) : 0n,\n        nonce: nonce ? BigInt(nonce) : 0n,\n        value: value ?? 0n,\n        data: data ? data : '0x0',\n        factoryDeps: factoryDeps?.map((dep) => toHex(hashBytecode(dep))) ?? [],\n        paymasterInput: paymasterInput ? paymasterInput : '0x',\n    };\n}\n//# sourceMappingURL=getEip712Domain.js.map","import { pad } from '../../utils/data/pad.js';\nimport { toBytes } from '../../utils/encoding/toBytes.js';\nimport { sha256 } from '../../utils/hash/sha256.js';\nimport { maxBytecodeSize } from '../constants/number.js';\nimport { BytecodeLengthExceedsMaxSizeError, BytecodeLengthInWordsMustBeOddError, BytecodeLengthMustBeDivisibleBy32Error, } from '../errors/bytecode.js';\nexport function hashBytecode(bytecode) {\n    const bytecodeBytes = toBytes(bytecode);\n    if (bytecodeBytes.length % 32 !== 0)\n        throw new BytecodeLengthMustBeDivisibleBy32Error({\n            givenLength: bytecodeBytes.length,\n        });\n    if (bytecodeBytes.length > maxBytecodeSize)\n        throw new BytecodeLengthExceedsMaxSizeError({\n            givenLength: bytecodeBytes.length,\n            maxBytecodeSize,\n        });\n    const hashStr = sha256(bytecodeBytes);\n    const hash = toBytes(hashStr);\n    // Note that the length of the bytecode\n    // should be provided in 32-byte words.\n    const bytecodeLengthInWords = bytecodeBytes.length / 32;\n    if (bytecodeLengthInWords % 2 === 0) {\n        throw new BytecodeLengthInWordsMustBeOddError({\n            givenLengthInWords: bytecodeLengthInWords,\n        });\n    }\n    const bytecodeLength = toBytes(bytecodeLengthInWords);\n    // The bytecode should always take the first 2 bytes of the bytecode hash,\n    // so we pad it from the left in case the length is smaller than 2 bytes.\n    const bytecodeLengthPadded = pad(bytecodeLength, { size: 2 });\n    const codeHashVersion = new Uint8Array([1, 0]);\n    hash.set(codeHashVersion, 0);\n    hash.set(bytecodeLengthPadded, 2);\n    return hash;\n}\n//# sourceMappingURL=hashBytecode.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const liskSepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 4202,\n    network: 'lisk-sepolia',\n    name: 'Lisk Sepolia',\n    nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://rpc.sepolia-api.lisk.com'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Blockscout',\n            url: 'https://sepolia-blockscout.lisk.com',\n            apiUrl: 'https://sepolia-blockscout.lisk.com/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0xA0E35F56C318DE1bD5D9ca6A94Fe7e37C5663348',\n            },\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n        },\n        portal: {\n            [sourceId]: {\n                address: '0xe3d90F21490686Ec7eF37BE788E02dfC12787264',\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0x1Fb30e446eA791cd1f011675E5F3f5311b70faF5',\n            },\n        },\n    },\n    testnet: true,\n    sourceId,\n});\n//# sourceMappingURL=liskSepolia.js.map","import { defineChain } from '../../utils/chain/defineChain.js';\nexport const mainnet = /*#__PURE__*/ defineChain({\n    id: 1,\n    name: 'Ethereum',\n    nativeCurrency: { name: 'Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://cloudflare-eth.com'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Etherscan',\n            url: 'https://etherscan.io',\n            apiUrl: 'https://api.etherscan.io/api',\n        },\n    },\n    contracts: {\n        ensRegistry: {\n            address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n        },\n        ensUniversalResolver: {\n            address: '0xce01f8eee7E479C928F8919abD53E553a36CeF67',\n            blockCreated: 19_258_213,\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 14_353_601,\n        },\n    },\n});\n//# sourceMappingURL=mainnet.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const optimismSepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 11155420,\n    name: 'OP Sepolia',\n    nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://sepolia.optimism.io'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Blockscout',\n            url: 'https://optimism-sepolia.blockscout.com',\n            apiUrl: 'https://optimism-sepolia.blockscout.com/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        disputeGameFactory: {\n            [sourceId]: {\n                address: '0x05F9613aDB30026FFd634f38e5C4dFd30a197Fa1',\n            },\n        },\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0x90E9c4f8a994a250F6aEfd61CAFb4F2e895D458F',\n            },\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 1620204,\n        },\n        portal: {\n            [sourceId]: {\n                address: '0x16Fc5058F25648194471939df75CF27A2fdC48BC',\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0xFBb0621E0B23b5478B630BD55a5f21f67730B0F1',\n            },\n        },\n    },\n    testnet: true,\n    sourceId,\n});\n//# sourceMappingURL=optimismSepolia.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const rss3Sepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 2_331,\n    name: 'RSS3 VSL Sepolia Testnet',\n    nativeCurrency: { name: 'RSS3', symbol: 'RSS3', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://rpc.testnet.rss3.io'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'RSS3 VSL Sepolia Testnet Scan',\n            url: 'https://scan.testnet.rss3.io',\n            apiUrl: 'https://scan.testnet.rss3.io/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0xDb5c46C3Eaa6Ed6aE8b2379785DF7dd029C0dC81',\n            },\n        },\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 55697,\n        },\n        portal: {\n            [sourceId]: {\n                address: '0xcBD77E8E1E7F06B25baDe67142cdE82652Da7b57',\n                blockCreated: 5345035,\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0xdDD29bb63B0839FB1cE0eE439Ff027738595D07B',\n            },\n        },\n    },\n    testnet: true,\n    sourceId,\n});\n//# sourceMappingURL=rss3Sepolia.js.map","import { defineChain } from '../../utils/chain/defineChain.js';\nexport const sepolia = /*#__PURE__*/ defineChain({\n    id: 11_155_111,\n    name: 'Sepolia',\n    nativeCurrency: { name: 'Sepolia Ether', symbol: 'ETH', decimals: 18 },\n    rpcUrls: {\n        default: {\n            http: ['https://rpc.sepolia.org'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Etherscan',\n            url: 'https://sepolia.etherscan.io',\n            apiUrl: 'https://api-sepolia.etherscan.io/api',\n        },\n    },\n    contracts: {\n        multicall3: {\n            address: '0xca11bde05977b3631167028862be2a173976ca11',\n            blockCreated: 751532,\n        },\n        ensRegistry: { address: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e' },\n        ensUniversalResolver: {\n            address: '0xc8Af999e38273D658BE1b921b88A9Ddf005769cC',\n            blockCreated: 5_317_080,\n        },\n    },\n    testnet: true,\n});\n//# sourceMappingURL=sepolia.js.map","import { chainConfig } from '../../op-stack/chainConfig.js';\nimport { defineChain } from '../../utils/chain/defineChain.js';\nconst sourceId = 11_155_111; // sepolia\nexport const zoraSepolia = /*#__PURE__*/ defineChain({\n    ...chainConfig,\n    id: 999999999,\n    name: 'Zora Sepolia',\n    network: 'zora-sepolia',\n    nativeCurrency: {\n        decimals: 18,\n        name: 'Zora Sepolia',\n        symbol: 'ETH',\n    },\n    rpcUrls: {\n        default: {\n            http: ['https://sepolia.rpc.zora.energy'],\n            webSocket: ['wss://sepolia.rpc.zora.energy'],\n        },\n    },\n    blockExplorers: {\n        default: {\n            name: 'Zora Sepolia Explorer',\n            url: 'https://sepolia.explorer.zora.energy/',\n            apiUrl: 'https://sepolia.explorer.zora.energy/api',\n        },\n    },\n    contracts: {\n        ...chainConfig.contracts,\n        l2OutputOracle: {\n            [sourceId]: {\n                address: '0x2615B481Bd3E5A1C0C7Ca3Da1bdc663E8615Ade9',\n            },\n        },\n        multicall3: {\n            address: '0xcA11bde05977b3631167028862bE2a173976CA11',\n            blockCreated: 83160,\n        },\n        portal: {\n            [sourceId]: {\n                address: '0xeffE2C6cA9Ab797D418f0D91eA60807713f3536f',\n            },\n        },\n        l1StandardBridge: {\n            [sourceId]: {\n                address: '0x5376f1D543dcbB5BD416c56C189e4cB7399fCcCB',\n            },\n        },\n    },\n    sourceId,\n    testnet: true,\n});\n//# sourceMappingURL=zoraSepolia.js.map"],"names":["defineChain","chain","formatters","undefined","fees","serializers","transactionType","formatTransaction","transaction","transaction_","blockHash","blockNumber","BigInt","chainId","hexToNumber","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","to","transactionIndex","Number","type","typeHex","value","v","yParity","accessList","defineTransaction","defineFormatter","formatBlock","block","transactions","map","baseFeePerGas","blobGasUsed","difficulty","excessBlobGas","gasLimit","gasUsed","hash","logsBloom","number","size","timestamp","totalDifficulty","defineBlock","formatLog","log","args","eventName","logIndex","transactionHash","receiptStatuses","formatTransactionReceipt","transactionReceipt","receipt","contractAddress","cumulativeGasUsed","effectiveGasPrice","logs","status","blobGasPrice","defineTransactionReceipt","formatters$2","format","formatted","isSystemTx","mint","hexToBigInt","sourceHash","stateRoot","l1GasPrice","l1GasUsed","l1Fee","l1FeeScalar","toRlp","bytes","encodable","getEncodable","cursor","createCursor","Uint8Array","length","encode","bytesToHex","Array","isArray","list","bodyLength","reduce","acc","x","sizeOfBodyLength","getSizeOfLength","pushByte","pushUint8","pushUint16","pushUint24","pushUint32","getEncodableList","bytesOrHex","hexToBytes","sizeOfBytesLength","pushBytes","getEncodableBytes","BaseError","blobsToCommitments","parameters","kzg","blobs","commitments","blob","push","from","blobToKzgCommitment","blobsToProofs","proofs","i","commitment","computeBlobKzgProof","SHA2","Hash","constructor","blockLen","outputLen","padOffset","isLE","super","this","finished","pos","destroyed","buffer","view","createView","update","data","exists","len","toBytes","take","Math","min","set","subarray","process","dataView","roundClean","digestInto","out","output","fill","byteOffset","setBigUint64","_32n","_u32_max","wh","wl","h","l","setUint32","oview","Error","outLen","state","get","digest","res","slice","destroy","_cloneInto","Maj","a","b","c","SHA256_K","Uint32Array","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","rotr","s1","T1","T2","Chi","sha256$1","wrapConstructor","sha256","to_","isHex","strict","toBytes$1","toHex","commitmentToVersionedHash","version","versionedHash","bytesPerFieldElement","fieldElementsPerBlob","bytesPerBlob","maxBytesPerTransaction","versionedHashVersionKzg","BlobSizeTooLargeError","maxSize","metaMessages","Object","defineProperty","enumerable","configurable","writable","EmptyBlobError","InvalidVersionedHashSizeError","InvalidVersionedHashVersionError","toBlobSidecars","size_","active","position","toBlobs","sidecars","proof","assertTransactionEIP1559","InvalidChainIdError","isAddress","InvalidAddressError","address","FeeCapTooHighError","TipAboveFeeCapError","serializeAccessList","serializedAccessList","storageKeys","j","InvalidStorageKeySizeError","storageKey","serializeTransaction$3","signature","blobVersionedHashes","InvalidSerializableTransactionError","getTransactionType","serializedTransaction","toYParitySignatureArray","concatHex","serializeTransactionEIP1559","assertTransactionEIP2930","serializeTransactionEIP2930","assertTransactionEIP4844","hashes","commitmentsToVersionedHashes","serializeTransactionEIP4844","assertTransactionLegacy","InvalidLegacyVError","r","s","serializeTransactionLegacy","trim","chainConfig$2","contracts","gasPriceOracle","l1Block","l2CrossDomainMessenger","l2Erc721Bridge","l2StandardBridge","l2ToL1MessagePasser","isDeposit","assertTransactionDeposit","serializeTransactionDeposit","sourceId$n","sourceId$k","id","name","nativeCurrency","decimals","symbol","rpcUrls","default","http","webSocket","blockExplorers","url","multicall3","blockCreated","testnet","estimateFeesPerGas","async","params","request","feeCurrency","Promise","all","estimateFeePerGasInFeeCurrency","client","estimateMaxPriorityFeePerGasInFeeCurrency","fee","method","feesPerGas","isEmpty","toLowerCase","isPresent","isCIP64","isEIP1559","serializers$1","MAX_MAX_FEE_PER_GAS","assertTransactionCIP64","serializeTransactionCIP64","chainConfig$1","exclude","gatewayFee","gatewayFeeRecipient","randomness","transactionRequest","defineTransactionRequest","sourceId$g","gasPerPubdataDefault","network","sourceId","maxBytecodeSize","l1BatchNumber","l1BatchTimestamp","l1BatchTxIndex","transactionLogIndex","logType","l2ToL1Logs","l2ToL1Log","shardId","isService","sender","key","gasPerPubdata","paymaster","paymasterInput","factoryDeps","customSignature","eip712Meta","paymasterParams","dep","InvalidEip712TransactionError","join","isEIP712Transaction","assertEip712Transaction","serializeTransactionEIP712","BytecodeLengthExceedsMaxSizeError","givenLength","BytecodeLengthInWordsMustBeOddError","givenLengthInWords","BytecodeLengthMustBeDivisibleBy32Error","chainConfig","custom","getEip712Domain","message","txType","gasPerPubdataByteLimit","bytecode","bytecodeBytes","hashStr","bytecodeLengthInWords","bytecodeLength","bytecodeLengthPadded","pad","codeHashVersion","hashBytecode","transactionToMessage","domain","types","Transaction","primaryType","sourceId$e","mainnet","apiUrl","ensRegistry","ensUniversalResolver","sourceId$8","sourceId$3","sepolia","sourceId$1"],"sourceRoot":""}