{"version":3,"file":"chunk/2941.e92beafa.js","mappings":"yLAEO,MAAMA,EAAU,6CACVC,EAAM,CACjB,gBACA,oDACA,wDACA,oEACA,kFACA,mEACA,0BACA,mEACA,6BACA,kCACA,8BACA,oFACA,sHACA,+JACA,mLACA,yLACA,oKACA,8IACA,mNACA,8KACA,uDACA,8EACA,+DACA,uDACA,qEACA,qEACA,uEACA,sEACA,+DACA,6DACA,wDACA,yJACA,iNACA,yJ","sources":["webpack://@snx-v3/ultrasound-homes/../../contracts/src/84532-andromeda/Multicall3.ts"],"sourcesContent":["// !!! DO NOT EDIT !!! Automatically generated file\n\nexport const address = '0xE2C5658cC5C448B48141168f3e475dF8f65A1e3e';\nexport const abi = [\n  'constructor()',\n  'error AddressInsufficientBalance(address account)',\n  'error ERC2771ForwarderExpiredRequest(uint48 deadline)',\n  'error ERC2771ForwarderInvalidSigner(address signer, address from)',\n  'error ERC2771ForwarderMismatchedValue(uint256 requestedValue, uint256 msgValue)',\n  'error ERC2771UntrustfulTarget(address target, address forwarder)',\n  'error FailedInnerCall()',\n  'error InvalidAccountNonce(address account, uint256 currentNonce)',\n  'error InvalidShortString()',\n  'error StringTooLong(string str)',\n  'event EIP712DomainChanged()',\n  'event ExecutedForwardRequest(address indexed signer, uint256 nonce, bool success)',\n  'function aggregate(tuple(address target, bytes callData)[] calls) returns (uint256 blockNumber, bytes[] returnData)',\n  'function aggregate3(tuple(address target, bool requireSuccess, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function aggregate3Value(tuple(address target, bool requireSuccess, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',\n  'function eip712Domain() view returns (bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)',\n  'function execute(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) payable',\n  'function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function executeBatch(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature)[] requests, address refundReceiver) payable',\n  'function getBasefee() view returns (uint256 basefee)',\n  'function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)',\n  'function getBlockNumber() view returns (uint256 blockNumber)',\n  'function getChainId() view returns (uint256 chainid)',\n  'function getCurrentBlockCoinbase() view returns (address coinbase)',\n  'function getCurrentBlockGasLimit() view returns (uint256 gaslimit)',\n  'function getCurrentBlockTimestamp() view returns (uint256 timestamp)',\n  'function getEthBalance(address addr) view returns (uint256 balance)',\n  'function getLastBlockHash() view returns (bytes32 blockHash)',\n  'function getPrevRandao() view returns (uint256 prevrandao)',\n  'function nonces(address owner) view returns (uint256)',\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',\n  'function verify(tuple(address from, address to, uint256 value, uint256 gas, uint48 deadline, bytes data, bytes signature) request) view returns (bool)',\n];\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from 'ethers';\nimport type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';\nimport type { Listener, Provider } from '@ethersproject/providers';\nimport type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';\n\nexport declare namespace TrustedMulticallForwarder {\n  export type CallStruct = { target: string; callData: BytesLike };\n\n  export type CallStructOutput = [string, string] & { target: string; callData: string };\n\n  export type Call3Struct = { target: string; requireSuccess: boolean; callData: BytesLike };\n\n  export type Call3StructOutput = [string, boolean, string] & {\n    target: string;\n    requireSuccess: boolean;\n    callData: string;\n  };\n\n  export type ResultStruct = { success: boolean; returnData: BytesLike };\n\n  export type ResultStructOutput = [boolean, string] & { success: boolean; returnData: string };\n\n  export type Call3ValueStruct = {\n    target: string;\n    requireSuccess: boolean;\n    value: BigNumberish;\n    callData: BytesLike;\n  };\n\n  export type Call3ValueStructOutput = [string, boolean, BigNumber, string] & {\n    target: string;\n    requireSuccess: boolean;\n    value: BigNumber;\n    callData: string;\n  };\n}\n\nexport declare namespace ERC2771Forwarder {\n  export type ForwardRequestDataStruct = {\n    from: string;\n    to: string;\n    value: BigNumberish;\n    gas: BigNumberish;\n    deadline: BigNumberish;\n    data: BytesLike;\n    signature: BytesLike;\n  };\n\n  export type ForwardRequestDataStructOutput = [\n    string,\n    string,\n    BigNumber,\n    BigNumber,\n    number,\n    string,\n    string\n  ] & {\n    from: string;\n    to: string;\n    value: BigNumber;\n    gas: BigNumber;\n    deadline: number;\n    data: string;\n    signature: string;\n  };\n}\n\nexport interface Multicall3Interface extends utils.Interface {\n  functions: {\n    'aggregate((address,bytes)[])': FunctionFragment;\n    'aggregate3((address,bool,bytes)[])': FunctionFragment;\n    'aggregate3Value((address,bool,uint256,bytes)[])': FunctionFragment;\n    'blockAndAggregate((address,bytes)[])': FunctionFragment;\n    'eip712Domain()': FunctionFragment;\n    'execute((address,address,uint256,uint256,uint48,bytes,bytes))': FunctionFragment;\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])': FunctionFragment;\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)': FunctionFragment;\n    'getBasefee()': FunctionFragment;\n    'getBlockHash(uint256)': FunctionFragment;\n    'getBlockNumber()': FunctionFragment;\n    'getChainId()': FunctionFragment;\n    'getCurrentBlockCoinbase()': FunctionFragment;\n    'getCurrentBlockGasLimit()': FunctionFragment;\n    'getCurrentBlockTimestamp()': FunctionFragment;\n    'getEthBalance(address)': FunctionFragment;\n    'getLastBlockHash()': FunctionFragment;\n    'getPrevRandao()': FunctionFragment;\n    'nonces(address)': FunctionFragment;\n    'tryAggregate(bool,(address,bytes)[])': FunctionFragment;\n    'tryBlockAndAggregate(bool,(address,bytes)[])': FunctionFragment;\n    'verify((address,address,uint256,uint256,uint48,bytes,bytes))': FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | 'aggregate'\n      | 'aggregate3'\n      | 'aggregate3Value'\n      | 'blockAndAggregate'\n      | 'eip712Domain'\n      | 'execute'\n      | 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'\n      | 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'\n      | 'getBasefee'\n      | 'getBlockHash'\n      | 'getBlockNumber'\n      | 'getChainId'\n      | 'getCurrentBlockCoinbase'\n      | 'getCurrentBlockGasLimit'\n      | 'getCurrentBlockTimestamp'\n      | 'getEthBalance'\n      | 'getLastBlockHash'\n      | 'getPrevRandao'\n      | 'nonces'\n      | 'tryAggregate'\n      | 'tryBlockAndAggregate'\n      | 'verify'\n  ): FunctionFragment;\n\n  encodeFunctionData(\n    functionFragment: 'aggregate',\n    values: [TrustedMulticallForwarder.CallStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'aggregate3',\n    values: [TrustedMulticallForwarder.Call3Struct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'aggregate3Value',\n    values: [TrustedMulticallForwarder.Call3ValueStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'blockAndAggregate',\n    values: [TrustedMulticallForwarder.CallStruct[]]\n  ): string;\n  encodeFunctionData(functionFragment: 'eip712Domain', values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: 'execute',\n    values: [ERC2771Forwarder.ForwardRequestDataStruct]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])',\n    values: [ERC2771Forwarder.ForwardRequestDataStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)',\n    values: [ERC2771Forwarder.ForwardRequestDataStruct[], string]\n  ): string;\n  encodeFunctionData(functionFragment: 'getBasefee', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getBlockHash', values: [BigNumberish]): string;\n  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getChainId', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockCoinbase', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockGasLimit', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockTimestamp', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getEthBalance', values: [string]): string;\n  encodeFunctionData(functionFragment: 'getLastBlockHash', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getPrevRandao', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;\n  encodeFunctionData(\n    functionFragment: 'tryAggregate',\n    values: [boolean, TrustedMulticallForwarder.CallStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'tryBlockAndAggregate',\n    values: [boolean, TrustedMulticallForwarder.CallStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'verify',\n    values: [ERC2771Forwarder.ForwardRequestDataStruct]\n  ): string;\n\n  decodeFunctionResult(functionFragment: 'aggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'aggregate3', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'aggregate3Value', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'blockAndAggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'eip712Domain', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result;\n  decodeFunctionResult(\n    functionFragment: 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])',\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(\n    functionFragment: 'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)',\n    data: BytesLike\n  ): Result;\n  decodeFunctionResult(functionFragment: 'getBasefee', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getBlockHash', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getChainId', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockCoinbase', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockGasLimit', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockTimestamp', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getEthBalance', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getLastBlockHash', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getPrevRandao', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'tryAggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'tryBlockAndAggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;\n\n  events: {\n    'EIP712DomainChanged()': EventFragment;\n    'ExecutedForwardRequest(address,uint256,bool)': EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: 'EIP712DomainChanged'): EventFragment;\n  getEvent(nameOrSignatureOrTopic: 'ExecutedForwardRequest'): EventFragment;\n}\n\nexport interface EIP712DomainChangedEventObject {}\nexport type EIP712DomainChangedEvent = TypedEvent<[], EIP712DomainChangedEventObject>;\n\nexport type EIP712DomainChangedEventFilter = TypedEventFilter<EIP712DomainChangedEvent>;\n\nexport interface ExecutedForwardRequestEventObject {\n  signer: string;\n  nonce: BigNumber;\n  success: boolean;\n}\nexport type ExecutedForwardRequestEvent = TypedEvent<\n  [string, BigNumber, boolean],\n  ExecutedForwardRequestEventObject\n>;\n\nexport type ExecutedForwardRequestEventFilter = TypedEventFilter<ExecutedForwardRequestEvent>;\n\nexport interface Multicall3 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: Multicall3Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    aggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    aggregate3(\n      calls: TrustedMulticallForwarder.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    aggregate3Value(\n      calls: TrustedMulticallForwarder.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    blockAndAggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    eip712Domain(\n      overrides?: CallOverrides\n    ): Promise<\n      [string, string, string, BigNumber, string, string, BigNumber[]] & {\n        fields: string;\n        name: string;\n        version: string;\n        chainId: BigNumber;\n        verifyingContract: string;\n        salt: string;\n        extensions: BigNumber[];\n      }\n    >;\n\n    execute(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      refundReceiver: string,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    getBasefee(overrides?: CallOverrides): Promise<[BigNumber] & { basefee: BigNumber }>;\n\n    getBlockHash(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[string] & { blockHash: string }>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber] & { blockNumber: BigNumber }>;\n\n    getChainId(overrides?: CallOverrides): Promise<[BigNumber] & { chainid: BigNumber }>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<[string] & { coinbase: string }>;\n\n    getCurrentBlockGasLimit(\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;\n\n    getCurrentBlockTimestamp(\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { timestamp: BigNumber }>;\n\n    getEthBalance(\n      addr: string,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { balance: BigNumber }>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<[string] & { blockHash: string }>;\n\n    getPrevRandao(overrides?: CallOverrides): Promise<[BigNumber] & { prevrandao: BigNumber }>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    verify(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: CallOverrides\n    ): Promise<[boolean]>;\n  };\n\n  aggregate(\n    calls: TrustedMulticallForwarder.CallStruct[],\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  aggregate3(\n    calls: TrustedMulticallForwarder.Call3Struct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  aggregate3Value(\n    calls: TrustedMulticallForwarder.Call3ValueStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  blockAndAggregate(\n    calls: TrustedMulticallForwarder.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  eip712Domain(\n    overrides?: CallOverrides\n  ): Promise<\n    [string, string, string, BigNumber, string, string, BigNumber[]] & {\n      fields: string;\n      name: string;\n      version: string;\n      chainId: BigNumber;\n      verifyingContract: string;\n      salt: string;\n      extensions: BigNumber[];\n    }\n  >;\n\n  execute(\n    request: ERC2771Forwarder.ForwardRequestDataStruct,\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'(\n    requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'(\n    requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n    refundReceiver: string,\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;\n\n  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;\n\n  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  getLastBlockHash(overrides?: CallOverrides): Promise<string>;\n\n  getPrevRandao(overrides?: CallOverrides): Promise<BigNumber>;\n\n  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  tryAggregate(\n    requireSuccess: boolean,\n    calls: TrustedMulticallForwarder.CallStruct[],\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  tryBlockAndAggregate(\n    requireSuccess: boolean,\n    calls: TrustedMulticallForwarder.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  verify(\n    request: ERC2771Forwarder.ForwardRequestDataStruct,\n    overrides?: CallOverrides\n  ): Promise<boolean>;\n\n  callStatic: {\n    aggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<[BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }>;\n\n    aggregate3(\n      calls: TrustedMulticallForwarder.Call3Struct[],\n      overrides?: CallOverrides\n    ): Promise<TrustedMulticallForwarder.ResultStructOutput[]>;\n\n    aggregate3Value(\n      calls: TrustedMulticallForwarder.Call3ValueStruct[],\n      overrides?: CallOverrides\n    ): Promise<TrustedMulticallForwarder.ResultStructOutput[]>;\n\n    blockAndAggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, TrustedMulticallForwarder.ResultStructOutput[]] & {\n        blockNumber: BigNumber;\n        blockHash: string;\n        returnData: TrustedMulticallForwarder.ResultStructOutput[];\n      }\n    >;\n\n    eip712Domain(\n      overrides?: CallOverrides\n    ): Promise<\n      [string, string, string, BigNumber, string, string, BigNumber[]] & {\n        fields: string;\n        name: string;\n        version: string;\n        chainId: BigNumber;\n        verifyingContract: string;\n        salt: string;\n        extensions: BigNumber[];\n      }\n    >;\n\n    execute(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      overrides?: CallOverrides\n    ): Promise<TrustedMulticallForwarder.ResultStructOutput[]>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      refundReceiver: string,\n      overrides?: CallOverrides\n    ): Promise<void>;\n\n    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<string>;\n\n    getPrevRandao(overrides?: CallOverrides): Promise<BigNumber>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<TrustedMulticallForwarder.ResultStructOutput[]>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, TrustedMulticallForwarder.ResultStructOutput[]] & {\n        blockNumber: BigNumber;\n        blockHash: string;\n        returnData: TrustedMulticallForwarder.ResultStructOutput[];\n      }\n    >;\n\n    verify(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: CallOverrides\n    ): Promise<boolean>;\n  };\n\n  filters: {\n    'EIP712DomainChanged()'(): EIP712DomainChangedEventFilter;\n    EIP712DomainChanged(): EIP712DomainChangedEventFilter;\n\n    'ExecutedForwardRequest(address,uint256,bool)'(\n      signer?: string | null,\n      nonce?: null,\n      success?: null\n    ): ExecutedForwardRequestEventFilter;\n    ExecutedForwardRequest(\n      signer?: string | null,\n      nonce?: null,\n      success?: null\n    ): ExecutedForwardRequestEventFilter;\n  };\n\n  estimateGas: {\n    aggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    aggregate3(\n      calls: TrustedMulticallForwarder.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    aggregate3Value(\n      calls: TrustedMulticallForwarder.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    blockAndAggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;\n\n    execute(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      refundReceiver: string,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getPrevRandao(overrides?: CallOverrides): Promise<BigNumber>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    verify(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    aggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    aggregate3(\n      calls: TrustedMulticallForwarder.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    aggregate3Value(\n      calls: TrustedMulticallForwarder.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    blockAndAggregate(\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    execute(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[])'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    'executeBatch((address,address,uint256,uint256,uint48,bytes,bytes)[],address)'(\n      requests: ERC2771Forwarder.ForwardRequestDataStruct[],\n      refundReceiver: string,\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    getBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getBlockHash(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getPrevRandao(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    nonces(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: TrustedMulticallForwarder.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    verify(\n      request: ERC2771Forwarder.ForwardRequestDataStruct,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n  };\n}\n\n"],"names":["address","abi"],"sourceRoot":""}