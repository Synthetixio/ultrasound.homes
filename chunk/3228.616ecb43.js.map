{"version":3,"file":"chunk/3228.616ecb43.js","mappings":"yLAEO,MAAMA,EAAU,6CACVC,EAAM,CACjB,wDACA,mBACA,oCACA,mCACA,mCACA,kCACA,sBACA,yDACA,yCACA,+DACA,6BACA,sDACA,uDACA,mDACA,0CACA,gCACA,wDACA,gDACA,qDACA,4BACA,mGACA,0DACA,mCACA,0CACA,kCACA,+BACA,kCACA,mCACA,gCACA,qCACA,0CACA,8CACA,4FACA,kHACA,wGACA,0KACA,qOACA,sG","sources":["webpack://@snx-v3/ultrasound-homes/../../contracts/src/11155111-main/OracleManagerProxy.ts"],"sourcesContent":["// !!! DO NOT EDIT !!! Automatically generated file\n\nexport const address = '0x12aE0D5CD26f212bFE242DA78139d463019f7a73';\nexport const abi = [\n  'error ImplementationIsSterile(address implementation)',\n  'error NoChange()',\n  'error NotAContract(address contr)',\n  'error NotNominated(address addr)',\n  'error Unauthorized(address addr)',\n  'error UpgradeSimulationFailed()',\n  'error ZeroAddress()',\n  'event OwnerChanged(address oldOwner, address newOwner)',\n  'event OwnerNominated(address newOwner)',\n  'event Upgraded(address indexed self, address implementation)',\n  'function acceptOwnership()',\n  'function getImplementation() view returns (address)',\n  'function nominateNewOwner(address newNominatedOwner)',\n  'function nominatedOwner() view returns (address)',\n  'function owner() view returns (address)',\n  'function renounceNomination()',\n  'function simulateUpgradeTo(address newImplementation)',\n  'function upgradeTo(address newImplementation)',\n  'error DeviationToleranceExceeded(int256 deviation)',\n  'error InvalidInputPrice()',\n  'error InvalidNodeDefinition(tuple(uint8 nodeType, bytes parameters, bytes32[] parents) nodeType)',\n  'error InvalidParameter(string parameter, string reason)',\n  'error InvalidPrice(int256 price)',\n  'error NodeNotRegistered(bytes32 nodeId)',\n  'error OverflowInt256ToUint256()',\n  'error OverflowInt56ToInt24()',\n  'error OverflowUint256ToInt256()',\n  'error OverflowUint256ToUint160()',\n  'error OverflowUint56ToInt56()',\n  'error StalenessToleranceExceeded()',\n  'error UnprocessableNode(bytes32 nodeId)',\n  'error UnsupportedOperation(uint8 operation)',\n  'event NodeRegistered(bytes32 nodeId, uint8 nodeType, bytes parameters, bytes32[] parents)',\n  'function getNode(bytes32 nodeId) pure returns (tuple(uint8 nodeType, bytes parameters, bytes32[] parents) node)',\n  'function getNodeId(uint8 nodeType, bytes parameters, bytes32[] parents) pure returns (bytes32 nodeId)',\n  'function process(bytes32 nodeId) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)',\n  'function processWithRuntime(bytes32 nodeId, bytes32[] runtimeKeys, bytes32[] runtimeValues) view returns (tuple(int256 price, uint256 timestamp, uint256 __slotAvailableForFutureUse1, uint256 __slotAvailableForFutureUse2) node)',\n  'function registerNode(uint8 nodeType, bytes parameters, bytes32[] parents) returns (bytes32 nodeId)',\n];\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  Overrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from 'ethers';\nimport type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';\nimport type { Listener, Provider } from '@ethersproject/providers';\nimport type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';\n\nexport declare namespace NodeDefinition {\n  export type DataStruct = { nodeType: BigNumberish; parameters: BytesLike; parents: BytesLike[] };\n\n  export type DataStructOutput = [number, string, string[]] & {\n    nodeType: number;\n    parameters: string;\n    parents: string[];\n  };\n}\n\nexport declare namespace NodeOutput {\n  export type DataStruct = {\n    price: BigNumberish;\n    timestamp: BigNumberish;\n    __slotAvailableForFutureUse1: BigNumberish;\n    __slotAvailableForFutureUse2: BigNumberish;\n  };\n\n  export type DataStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {\n    price: BigNumber;\n    timestamp: BigNumber;\n    __slotAvailableForFutureUse1: BigNumber;\n    __slotAvailableForFutureUse2: BigNumber;\n  };\n}\n\nexport interface OracleManagerProxyInterface extends utils.Interface {\n  functions: {\n    'acceptOwnership()': FunctionFragment;\n    'getImplementation()': FunctionFragment;\n    'nominateNewOwner(address)': FunctionFragment;\n    'nominatedOwner()': FunctionFragment;\n    'owner()': FunctionFragment;\n    'renounceNomination()': FunctionFragment;\n    'simulateUpgradeTo(address)': FunctionFragment;\n    'upgradeTo(address)': FunctionFragment;\n    'getNode(bytes32)': FunctionFragment;\n    'getNodeId(uint8,bytes,bytes32[])': FunctionFragment;\n    'process(bytes32)': FunctionFragment;\n    'processWithRuntime(bytes32,bytes32[],bytes32[])': FunctionFragment;\n    'registerNode(uint8,bytes,bytes32[])': FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | 'acceptOwnership'\n      | 'getImplementation'\n      | 'nominateNewOwner'\n      | 'nominatedOwner'\n      | 'owner'\n      | 'renounceNomination'\n      | 'simulateUpgradeTo'\n      | 'upgradeTo'\n      | 'getNode'\n      | 'getNodeId'\n      | 'process'\n      | 'processWithRuntime'\n      | 'registerNode'\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getImplementation', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'nominateNewOwner', values: [string]): string;\n  encodeFunctionData(functionFragment: 'nominatedOwner', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'renounceNomination', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'simulateUpgradeTo', values: [string]): string;\n  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;\n  encodeFunctionData(functionFragment: 'getNode', values: [BytesLike]): string;\n  encodeFunctionData(\n    functionFragment: 'getNodeId',\n    values: [BigNumberish, BytesLike, BytesLike[]]\n  ): string;\n  encodeFunctionData(functionFragment: 'process', values: [BytesLike]): string;\n  encodeFunctionData(\n    functionFragment: 'processWithRuntime',\n    values: [BytesLike, BytesLike[], BytesLike[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'registerNode',\n    values: [BigNumberish, BytesLike, BytesLike[]]\n  ): string;\n\n  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getImplementation', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'nominateNewOwner', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'nominatedOwner', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'renounceNomination', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'simulateUpgradeTo', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getNode', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getNodeId', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'process', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'processWithRuntime', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'registerNode', data: BytesLike): Result;\n\n  events: {\n    'OwnerChanged(address,address)': EventFragment;\n    'OwnerNominated(address)': EventFragment;\n    'Upgraded(address,address)': EventFragment;\n    'NodeRegistered(bytes32,uint8,bytes,bytes32[])': EventFragment;\n  };\n\n  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;\n  getEvent(nameOrSignatureOrTopic: 'OwnerNominated'): EventFragment;\n  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;\n  getEvent(nameOrSignatureOrTopic: 'NodeRegistered'): EventFragment;\n}\n\nexport interface OwnerChangedEventObject {\n  oldOwner: string;\n  newOwner: string;\n}\nexport type OwnerChangedEvent = TypedEvent<[string, string], OwnerChangedEventObject>;\n\nexport type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;\n\nexport interface OwnerNominatedEventObject {\n  newOwner: string;\n}\nexport type OwnerNominatedEvent = TypedEvent<[string], OwnerNominatedEventObject>;\n\nexport type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;\n\nexport interface UpgradedEventObject {\n  self: string;\n  implementation: string;\n}\nexport type UpgradedEvent = TypedEvent<[string, string], UpgradedEventObject>;\n\nexport type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;\n\nexport interface NodeRegisteredEventObject {\n  nodeId: string;\n  nodeType: number;\n  parameters: string;\n  parents: string[];\n}\nexport type NodeRegisteredEvent = TypedEvent<\n  [string, number, string, string[]],\n  NodeRegisteredEventObject\n>;\n\nexport type NodeRegisteredEventFilter = TypedEventFilter<NodeRegisteredEvent>;\n\nexport interface OracleManagerProxy extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: OracleManagerProxyInterface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;\n\n    getImplementation(overrides?: CallOverrides): Promise<[string]>;\n\n    nominateNewOwner(\n      newNominatedOwner: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;\n\n    owner(overrides?: CallOverrides): Promise<[string]>;\n\n    renounceNomination(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;\n\n    simulateUpgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    upgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    getNode(\n      nodeId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[NodeDefinition.DataStructOutput] & { node: NodeDefinition.DataStructOutput }>;\n\n    getNodeId(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<[string] & { nodeId: string }>;\n\n    process(\n      nodeId: BytesLike,\n      overrides?: CallOverrides\n    ): Promise<[NodeOutput.DataStructOutput] & { node: NodeOutput.DataStructOutput }>;\n\n    processWithRuntime(\n      nodeId: BytesLike,\n      runtimeKeys: BytesLike[],\n      runtimeValues: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<[NodeOutput.DataStructOutput] & { node: NodeOutput.DataStructOutput }>;\n\n    registerNode(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<ContractTransaction>;\n  };\n\n  acceptOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;\n\n  getImplementation(overrides?: CallOverrides): Promise<string>;\n\n  nominateNewOwner(\n    newNominatedOwner: string,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  nominatedOwner(overrides?: CallOverrides): Promise<string>;\n\n  owner(overrides?: CallOverrides): Promise<string>;\n\n  renounceNomination(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;\n\n  simulateUpgradeTo(\n    newImplementation: string,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  upgradeTo(\n    newImplementation: string,\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  getNode(nodeId: BytesLike, overrides?: CallOverrides): Promise<NodeDefinition.DataStructOutput>;\n\n  getNodeId(\n    nodeType: BigNumberish,\n    parameters: BytesLike,\n    parents: BytesLike[],\n    overrides?: CallOverrides\n  ): Promise<string>;\n\n  process(nodeId: BytesLike, overrides?: CallOverrides): Promise<NodeOutput.DataStructOutput>;\n\n  processWithRuntime(\n    nodeId: BytesLike,\n    runtimeKeys: BytesLike[],\n    runtimeValues: BytesLike[],\n    overrides?: CallOverrides\n  ): Promise<NodeOutput.DataStructOutput>;\n\n  registerNode(\n    nodeType: BigNumberish,\n    parameters: BytesLike,\n    parents: BytesLike[],\n    overrides?: Overrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    acceptOwnership(overrides?: CallOverrides): Promise<void>;\n\n    getImplementation(overrides?: CallOverrides): Promise<string>;\n\n    nominateNewOwner(newNominatedOwner: string, overrides?: CallOverrides): Promise<void>;\n\n    nominatedOwner(overrides?: CallOverrides): Promise<string>;\n\n    owner(overrides?: CallOverrides): Promise<string>;\n\n    renounceNomination(overrides?: CallOverrides): Promise<void>;\n\n    simulateUpgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;\n\n    upgradeTo(newImplementation: string, overrides?: CallOverrides): Promise<void>;\n\n    getNode(nodeId: BytesLike, overrides?: CallOverrides): Promise<NodeDefinition.DataStructOutput>;\n\n    getNodeId(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<string>;\n\n    process(nodeId: BytesLike, overrides?: CallOverrides): Promise<NodeOutput.DataStructOutput>;\n\n    processWithRuntime(\n      nodeId: BytesLike,\n      runtimeKeys: BytesLike[],\n      runtimeValues: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<NodeOutput.DataStructOutput>;\n\n    registerNode(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<string>;\n  };\n\n  filters: {\n    'OwnerChanged(address,address)'(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;\n    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;\n\n    'OwnerNominated(address)'(newOwner?: null): OwnerNominatedEventFilter;\n    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;\n\n    'Upgraded(address,address)'(self?: string | null, implementation?: null): UpgradedEventFilter;\n    Upgraded(self?: string | null, implementation?: null): UpgradedEventFilter;\n\n    'NodeRegistered(bytes32,uint8,bytes,bytes32[])'(\n      nodeId?: null,\n      nodeType?: null,\n      parameters?: null,\n      parents?: null\n    ): NodeRegisteredEventFilter;\n    NodeRegistered(\n      nodeId?: null,\n      nodeType?: null,\n      parameters?: null,\n      parents?: null\n    ): NodeRegisteredEventFilter;\n  };\n\n  estimateGas: {\n    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;\n\n    getImplementation(overrides?: CallOverrides): Promise<BigNumber>;\n\n    nominateNewOwner(\n      newNominatedOwner: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;\n\n    owner(overrides?: CallOverrides): Promise<BigNumber>;\n\n    renounceNomination(overrides?: Overrides & { from?: string }): Promise<BigNumber>;\n\n    simulateUpgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    upgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    getNode(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getNodeId(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    process(nodeId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;\n\n    processWithRuntime(\n      nodeId: BytesLike,\n      runtimeKeys: BytesLike[],\n      runtimeValues: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<BigNumber>;\n\n    registerNode(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    acceptOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;\n\n    getImplementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    nominateNewOwner(\n      newNominatedOwner: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    renounceNomination(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;\n\n    simulateUpgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    upgradeTo(\n      newImplementation: string,\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    getNode(nodeId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getNodeId(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    process(nodeId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    processWithRuntime(\n      nodeId: BytesLike,\n      runtimeKeys: BytesLike[],\n      runtimeValues: BytesLike[],\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    registerNode(\n      nodeType: BigNumberish,\n      parameters: BytesLike,\n      parents: BytesLike[],\n      overrides?: Overrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n\n"],"names":["address","abi"],"sourceRoot":""}