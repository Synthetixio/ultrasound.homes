{"version":3,"file":"chunk/7188.df78ef26.js","mappings":"6KAEO,MAAMA,EAAU,6CACVC,EAAM,CACjB,8HACA,6JACA,iLACA,yLACA,uDACA,8EACA,+DACA,uDACA,qEACA,yEACA,qEACA,uEACA,sEACA,+DACA,iKACA,iN","sources":["webpack://@snx-v3/ultrasound/../../contracts/src/13370-main/Multicall3.ts"],"sourcesContent":["// !!! DO NOT EDIT !!! Automatically generated file\n\nexport const address = '0xcA11bde05977b3631167028862bE2a173976CA11';\nexport const abi = [\n  'function aggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes[] returnData)',\n  'function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function aggregate3Value(tuple(address target, bool allowFailure, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',\n  'function getBasefee() view returns (uint256 basefee)',\n  'function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)',\n  'function getBlockNumber() view returns (uint256 blockNumber)',\n  'function getChainId() view returns (uint256 chainid)',\n  'function getCurrentBlockCoinbase() view returns (address coinbase)',\n  'function getCurrentBlockDifficulty() view returns (uint256 difficulty)',\n  'function getCurrentBlockGasLimit() view returns (uint256 gaslimit)',\n  'function getCurrentBlockTimestamp() view returns (uint256 timestamp)',\n  'function getEthBalance(address addr) view returns (uint256 balance)',\n  'function getLastBlockHash() view returns (bytes32 blockHash)',\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',\n  'function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',\n];\n\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport type {\n  BaseContract,\n  BigNumber,\n  BigNumberish,\n  BytesLike,\n  CallOverrides,\n  ContractTransaction,\n  PayableOverrides,\n  PopulatedTransaction,\n  Signer,\n  utils,\n} from 'ethers';\nimport type { FunctionFragment, Result } from '@ethersproject/abi';\nimport type { Listener, Provider } from '@ethersproject/providers';\nimport type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';\n\nexport declare namespace Multicall3 {\n  export type CallStruct = { target: string; callData: BytesLike };\n\n  export type CallStructOutput = [string, string] & { target: string; callData: string };\n\n  export type Call3Struct = { target: string; allowFailure: boolean; callData: BytesLike };\n\n  export type Call3StructOutput = [string, boolean, string] & {\n    target: string;\n    allowFailure: boolean;\n    callData: string;\n  };\n\n  export type ResultStruct = { success: boolean; returnData: BytesLike };\n\n  export type ResultStructOutput = [boolean, string] & { success: boolean; returnData: string };\n\n  export type Call3ValueStruct = {\n    target: string;\n    allowFailure: boolean;\n    value: BigNumberish;\n    callData: BytesLike;\n  };\n\n  export type Call3ValueStructOutput = [string, boolean, BigNumber, string] & {\n    target: string;\n    allowFailure: boolean;\n    value: BigNumber;\n    callData: string;\n  };\n}\n\nexport interface Multicall3Interface extends utils.Interface {\n  functions: {\n    'aggregate((address,bytes)[])': FunctionFragment;\n    'aggregate3((address,bool,bytes)[])': FunctionFragment;\n    'aggregate3Value((address,bool,uint256,bytes)[])': FunctionFragment;\n    'blockAndAggregate((address,bytes)[])': FunctionFragment;\n    'getBasefee()': FunctionFragment;\n    'getBlockHash(uint256)': FunctionFragment;\n    'getBlockNumber()': FunctionFragment;\n    'getChainId()': FunctionFragment;\n    'getCurrentBlockCoinbase()': FunctionFragment;\n    'getCurrentBlockDifficulty()': FunctionFragment;\n    'getCurrentBlockGasLimit()': FunctionFragment;\n    'getCurrentBlockTimestamp()': FunctionFragment;\n    'getEthBalance(address)': FunctionFragment;\n    'getLastBlockHash()': FunctionFragment;\n    'tryAggregate(bool,(address,bytes)[])': FunctionFragment;\n    'tryBlockAndAggregate(bool,(address,bytes)[])': FunctionFragment;\n  };\n\n  getFunction(\n    nameOrSignatureOrTopic:\n      | 'aggregate'\n      | 'aggregate3'\n      | 'aggregate3Value'\n      | 'blockAndAggregate'\n      | 'getBasefee'\n      | 'getBlockHash'\n      | 'getBlockNumber'\n      | 'getChainId'\n      | 'getCurrentBlockCoinbase'\n      | 'getCurrentBlockDifficulty'\n      | 'getCurrentBlockGasLimit'\n      | 'getCurrentBlockTimestamp'\n      | 'getEthBalance'\n      | 'getLastBlockHash'\n      | 'tryAggregate'\n      | 'tryBlockAndAggregate'\n  ): FunctionFragment;\n\n  encodeFunctionData(functionFragment: 'aggregate', values: [Multicall3.CallStruct[]]): string;\n  encodeFunctionData(functionFragment: 'aggregate3', values: [Multicall3.Call3Struct[]]): string;\n  encodeFunctionData(\n    functionFragment: 'aggregate3Value',\n    values: [Multicall3.Call3ValueStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'blockAndAggregate',\n    values: [Multicall3.CallStruct[]]\n  ): string;\n  encodeFunctionData(functionFragment: 'getBasefee', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getBlockHash', values: [BigNumberish]): string;\n  encodeFunctionData(functionFragment: 'getBlockNumber', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getChainId', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockCoinbase', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockDifficulty', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockGasLimit', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getCurrentBlockTimestamp', values?: undefined): string;\n  encodeFunctionData(functionFragment: 'getEthBalance', values: [string]): string;\n  encodeFunctionData(functionFragment: 'getLastBlockHash', values?: undefined): string;\n  encodeFunctionData(\n    functionFragment: 'tryAggregate',\n    values: [boolean, Multicall3.CallStruct[]]\n  ): string;\n  encodeFunctionData(\n    functionFragment: 'tryBlockAndAggregate',\n    values: [boolean, Multicall3.CallStruct[]]\n  ): string;\n\n  decodeFunctionResult(functionFragment: 'aggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'aggregate3', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'aggregate3Value', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'blockAndAggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getBasefee', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getBlockHash', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getBlockNumber', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getChainId', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockCoinbase', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockDifficulty', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockGasLimit', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getCurrentBlockTimestamp', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getEthBalance', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'getLastBlockHash', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'tryAggregate', data: BytesLike): Result;\n  decodeFunctionResult(functionFragment: 'tryBlockAndAggregate', data: BytesLike): Result;\n\n  events: {};\n}\n\nexport interface Multicall3 extends BaseContract {\n  connect(signerOrProvider: Signer | Provider | string): this;\n  attach(addressOrName: string): this;\n  deployed(): Promise<this>;\n\n  interface: Multicall3Interface;\n\n  queryFilter<TEvent extends TypedEvent>(\n    event: TypedEventFilter<TEvent>,\n    fromBlockOrBlockhash?: string | number | undefined,\n    toBlock?: string | number | undefined\n  ): Promise<Array<TEvent>>;\n\n  listeners<TEvent extends TypedEvent>(\n    eventFilter?: TypedEventFilter<TEvent>\n  ): Array<TypedListener<TEvent>>;\n  listeners(eventName?: string): Array<Listener>;\n  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;\n  removeAllListeners(eventName?: string): this;\n  off: OnEvent<this>;\n  on: OnEvent<this>;\n  once: OnEvent<this>;\n  removeListener: OnEvent<this>;\n\n  functions: {\n    aggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    aggregate3(\n      calls: Multicall3.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    aggregate3Value(\n      calls: Multicall3.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    blockAndAggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    getBasefee(overrides?: CallOverrides): Promise<[BigNumber] & { basefee: BigNumber }>;\n\n    getBlockHash(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<[string] & { blockHash: string }>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber] & { blockNumber: BigNumber }>;\n\n    getChainId(overrides?: CallOverrides): Promise<[BigNumber] & { chainid: BigNumber }>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<[string] & { coinbase: string }>;\n\n    getCurrentBlockDifficulty(\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { difficulty: BigNumber }>;\n\n    getCurrentBlockGasLimit(\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { gaslimit: BigNumber }>;\n\n    getCurrentBlockTimestamp(\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { timestamp: BigNumber }>;\n\n    getEthBalance(\n      addr: string,\n      overrides?: CallOverrides\n    ): Promise<[BigNumber] & { balance: BigNumber }>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<[string] & { blockHash: string }>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<ContractTransaction>;\n  };\n\n  aggregate(\n    calls: Multicall3.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  aggregate3(\n    calls: Multicall3.Call3Struct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  aggregate3Value(\n    calls: Multicall3.Call3ValueStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  blockAndAggregate(\n    calls: Multicall3.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;\n\n  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;\n\n  getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n  getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n  getLastBlockHash(overrides?: CallOverrides): Promise<string>;\n\n  tryAggregate(\n    requireSuccess: boolean,\n    calls: Multicall3.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  tryBlockAndAggregate(\n    requireSuccess: boolean,\n    calls: Multicall3.CallStruct[],\n    overrides?: PayableOverrides & { from?: string }\n  ): Promise<ContractTransaction>;\n\n  callStatic: {\n    aggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<[BigNumber, string[]] & { blockNumber: BigNumber; returnData: string[] }>;\n\n    aggregate3(\n      calls: Multicall3.Call3Struct[],\n      overrides?: CallOverrides\n    ): Promise<Multicall3.ResultStructOutput[]>;\n\n    aggregate3Value(\n      calls: Multicall3.Call3ValueStruct[],\n      overrides?: CallOverrides\n    ): Promise<Multicall3.ResultStructOutput[]>;\n\n    blockAndAggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, Multicall3.ResultStructOutput[]] & {\n        blockNumber: BigNumber;\n        blockHash: string;\n        returnData: Multicall3.ResultStructOutput[];\n      }\n    >;\n\n    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<string>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<string>;\n\n    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<string>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<Multicall3.ResultStructOutput[]>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: CallOverrides\n    ): Promise<\n      [BigNumber, string, Multicall3.ResultStructOutput[]] & {\n        blockNumber: BigNumber;\n        blockHash: string;\n        returnData: Multicall3.ResultStructOutput[];\n      }\n    >;\n  };\n\n  filters: {};\n\n  estimateGas: {\n    aggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    aggregate3(\n      calls: Multicall3.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    aggregate3Value(\n      calls: Multicall3.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    blockAndAggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    getBasefee(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockHash(blockNumber: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getChainId(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<BigNumber>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<BigNumber>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<BigNumber>;\n  };\n\n  populateTransaction: {\n    aggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    aggregate3(\n      calls: Multicall3.Call3Struct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    aggregate3Value(\n      calls: Multicall3.Call3ValueStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    blockAndAggregate(\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    getBasefee(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getBlockHash(\n      blockNumber: BigNumberish,\n      overrides?: CallOverrides\n    ): Promise<PopulatedTransaction>;\n\n    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockCoinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockDifficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getCurrentBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getEthBalance(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    getLastBlockHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n\n    tryAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n\n    tryBlockAndAggregate(\n      requireSuccess: boolean,\n      calls: Multicall3.CallStruct[],\n      overrides?: PayableOverrides & { from?: string }\n    ): Promise<PopulatedTransaction>;\n  };\n}\n\n"],"names":["address","abi"],"sourceRoot":""}