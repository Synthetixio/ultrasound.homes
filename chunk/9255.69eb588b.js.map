{"version":3,"file":"chunk/9255.69eb588b.js","mappings":"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","sources":["webpack://@snx-v3/ultrasound/../../node_modules/base-x/src/index.js","webpack://@snx-v3/ultrasound/../../node_modules/bs58/index.js","webpack://@snx-v3/ultrasound/../../node_modules/bs58check/base.js","webpack://@snx-v3/ultrasound/../../node_modules/bs58check/index.js","webpack://@snx-v3/ultrasound/../../node_modules/hdkey/lib/hdkey.js"],"sourcesContent":["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar RIPEMD160 = require('ripemd160')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nfunction setPublicKey (hdkey, publicKey) {\n  hdkey._publicKey = Buffer.from(publicKey)\n  hdkey._identifier = hash160(publicKey)\n  hdkey._fingerprint = hdkey._identifier.slice(0, 4).readUInt32BE(0)\n  hdkey._privateKey = null\n}\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n    // force compressed point (performs public key verification)\n    const publicKey = (value.length === 65) ? secp256k1.publicKeyConvert(value, true) : value\n    setPublicKey(this, publicKey)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(Uint8Array.from(hash), Uint8Array.from(this.privateKey)).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions, skipVerification) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  skipVerification = skipVerification || false\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    if (skipVerification) {\n      setPublicKey(hdkey, key)\n    } else {\n      hdkey.publicKey = key\n    }\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return new RIPEMD160().update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n"],"names":["_Buffer","module","exports","ALPHABET","length","TypeError","BASE_MAP","Uint8Array","j","i","x","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","Math","log","iFACTOR","decodeUnsafe","source","alloc","psz","zeroes","size","b256","carry","it3","Error","it4","vch","allocUnsafe","fill","encode","Array","isArray","from","isBuffer","pbegin","pend","b58","it1","it2","str","repeat","decode","string","buffer","basex","base58","Buffer","checksumFn","decodeRaw","payload","slice","checksum","newChecksum","concat","createHash","bs58checkBase","tmp","update","digest","assert","crypto","bs58check","RIPEMD160","secp256k1","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","setPublicKey","hdkey","publicKey","_identifier","hash160","readUInt32BE","serialize","version","key","writeUInt32BE","writeUInt8","fingerprint","copy","buf","sha","Object","defineProperty","prototype","get","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","publicKeyVerify","publicKeyConvert","privateKey","derive","path","entries","split","forEach","c","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","skipVerification","keyBuffer","readUInt8","fromJSON","obj"],"sourceRoot":""}